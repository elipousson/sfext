% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_misc.R
\name{st_misc}
\alias{st_misc}
\alias{st_scale_rotate}
\alias{st_center}
\alias{st_square}
\alias{st_inscribed_square}
\alias{st_circle}
\alias{st_circumscribed_circle}
\alias{st_donut}
\title{Modify the geometry of a simple feature or bounding box object}
\usage{
st_scale_rotate(x, scale = 1, rotate = 0)

st_center(x, ext = TRUE, ...)

st_square(x, scale = 1, rotate = 0, inscribed = FALSE, by_feature = FALSE)

st_inscribed_square(x, scale = 1, rotate = 0, by_feature = FALSE)

st_circle(
  x,
  scale = 1,
  inscribed = TRUE,
  dTolerance = 0.01,
  by_feature = FALSE,
  use_hull = FALSE,
  use_lwgeom = FALSE
)

st_circumscribed_circle(x, scale = 1, dTolerance = 0, by_feature = FALSE)

st_donut(x, width = 0.4, scale = 1, by_feature = FALSE, ...)
}
\arguments{
\item{x}{A \code{sf}, \code{sfc}, or \code{bbox} object}

\item{scale}{numeric; scale factor, Default: 1}

\item{rotate}{numeric; degrees to rotate (-360 to 360), Default: 0}

\item{ext}{If \code{TRUE}, st_center returns a list with the centroid as a \code{sfc}
object, as an \code{sf} object (with lon and lat values), the original geometry
(x), and the original crs. objects; defaults TRUE. If \code{FALSE}, return an \code{sf}
object.}

\item{...}{Additional parameters passed to \code{\link[sf:geos_unary]{sf::st_centroid()}}}

\item{inscribed}{If \code{TRUE}, make circle or square inscribed within x, if
\code{FALSE}, make it circumscribed.}

\item{dTolerance}{numeric; tolerance parameter, specified for all or for each
feature geometry. If you run \code{st_simplify}, the input data is
specified with long-lat coordinates and \code{sf_use_s2()} returns
\code{TRUE}, then the value of \code{dTolerance} must be specified in
meters.}

\item{use_hull}{For \code{\link[=st_circle]{st_circle()}}, if \code{TRUE} use the geometry from
\code{\link[sf:geos_unary]{sf::st_convex_hull()}} (to address issues with MULTIPOLYGON objects).}

\item{use_lwgeom}{If \code{TRUE}, \code{by_feature = TRUE} and \code{inscribed = FALSE}, use
\code{\link[lwgeom:bounding_circle]{lwgeom::st_minimum_bounding_circle()}}.}

\item{width}{Donut width as proportion of outer size.}
}
\description{
Support \code{sf}, \code{sfc}, and \code{bbox} and objects as inputs.
\itemize{
\item Scale or rotate a simple feature or bounding box object using affine
transformations
\item Get the center point for a \code{sf} object
\item Get a circumscribed square or approximate inscribed square in a \code{sf} object
\item Get a circumscribed circle or inscribed circle in a \code{sf} object
\item Get a donut for a \code{sf} object
}

st_inscribed_square wraps \code{\link[sf:geos_unary]{sf::st_inscribed_circle()}} but limits the circle
to 1 segment per quadrant (\code{nQuadSegs = 1}) and then rotates the resulting
geometry 45 degrees to provide a (mostly) inscribed square. A different
rotation value can be provided to change the orientation of the shape, e.g.
\code{rotate = -45} to return a diamond shape. \code{\link[=st_square]{st_square()}} wraps \code{\link[=st_bbox_ext]{st_bbox_ext()}} with
\code{asp = 1}.
}
\examples{
nc <- read_sf_path(system.file("shape/nc.shp", package = "sf"))
nc <- st_transform_ext(nc, crs = 3857)

plot(st_scale_rotate(nc), max.plot = 1)

plot(st_scale_rotate(nc, scale = 0.6, rotate = 15), max.plot = 1)

plot(st_square(nc[5,]))

plot(st_square(nc[5,], scale = 0.6, rotate = 45), col = "blue", add = TRUE)
}
\seealso{
\itemize{
\item \link[sf:geos_unary]{sf::geos_unary}
}
}
