% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_sf_ext.R
\name{read_sf_ext}
\alias{read_sf_ext}
\alias{read_sf_pkg}
\alias{read_sf_path}
\alias{read_sf_query}
\alias{read_sf_excel}
\alias{read_sf_csv}
\alias{read_sf_url}
\alias{read_sf_geojson}
\alias{read_sf_gist}
\alias{read_sf_gmap}
\alias{read_sf_download}
\alias{read_sf_gsheet}
\title{Read spatial data in a bounding box to a simple feature object}
\usage{
read_sf_ext(..., bbox = NULL)

read_sf_pkg(data, bbox = NULL, package = NULL, filetype = "gpkg", ...)

read_sf_path(path, bbox = NULL, ...)

read_sf_query(
  path,
  dsn = NULL,
  bbox = NULL,
  query = NA,
  table = NULL,
  name = NULL,
  name_col = NULL,
  wkt_filter = character(0),
  zm_drop = FALSE,
  ...
)

read_sf_excel(
  path,
  sheet = NULL,
  bbox = NULL,
  coords = c("lon", "lat"),
  from_crs = 4326,
  geo = FALSE,
  address = "address",
  ...
)

read_sf_csv(
  path,
  url = NULL,
  bbox = NULL,
  coords = c("lon", "lat"),
  from_crs = 4326,
  geo = FALSE,
  address = "address",
  show_col_types = FALSE,
  ...
)

read_sf_url(url, bbox = NULL, coords = NULL, zm_drop = TRUE, ...)

read_sf_geojson(url, path = NULL, geojson = NULL, bbox = NULL, ...)

read_sf_gist(url, id = NULL, bbox = NULL, ...)

read_sf_gmap(url, bbox = NULL, zm_drop = TRUE)

read_sf_download(
  url,
  filename,
  bbox = NULL,
  path = NULL,
  filetype = "geojson",
  prefix = "date",
  method = "auto",
  unzip = FALSE,
  ...
)

read_sf_gsheet(
  url,
  sheet = NULL,
  ss = NULL,
  bbox = NULL,
  ask = FALSE,
  coords = c("lon", "lat"),
  from_crs = 4326,
  geo = FALSE,
  address = "address",
  ...
)
}
\arguments{
\item{...}{Additional parameters passed to multiple functions; see details.}

\item{bbox}{A bounding box object; defaults to `NULL`. If `"bbox"` is provided,
only returns features intersecting the bounding box.}

\item{data}{Character; name of dataset; used by [read_sf_pkg()] only.}

\item{package}{Character; package name; used by [read_sf_pkg()] only.}

\item{filetype}{File type supported for dsn parameter of [sf::read_sf()];
Default: 'gpkg'; used by [read_sf_pkg()] only and required only if the data
is in the package cache directory or extdata system files.}

\item{path}{A file path.}

\item{dsn}{data source name (interpretation varies by driver - for some
drivers, \code{dsn} is a file name, but may also be a folder, or contain
the name and access credentials of a database); in case of GeoJSON,
\code{dsn} may be the character string holding the geojson data. It can
also be an open database connection.}

\item{query}{SQL query to select records; see details}

\item{name}{Name to make file name converted to snake case with
\code{\link[janitor:make_clean_names]{janitor::make_clean_names()}}, e.g. "Residential zoning map" becomes
"residential_zoning_map"}

\item{wkt_filter}{character; WKT representation of a spatial filter (may be used as bounding box, selecting overlapping geometries); see examples}

\item{zm_drop}{If `TRUE`, drop Z and/or M dimensions using [sf::st_zm]}

\item{sheet}{Sheet to read. Either a string (the name of a sheet), or an
integer (the position of the sheet). Ignored if the sheet is specified via
\code{range}. If neither argument specifies the sheet, defaults to the first
sheet.}

\item{coords}{Character vector with coordinate values. Coordinates must be
latlon data (with coordinate reference system 4326).}

\item{from_crs}{For [df_to_sf], coordinate reference system used by
coordinates or well known text in data frame.}

\item{geo}{If `TRUE`, use [address_to_sf] to geocode address column; defaults
to `FALSE`.}

\item{address}{Address column name, Default: 'address'}

\item{url}{A url for a spatial data file, a GitHub gist, or a ArcGIS
FeatureServer or MapServer to access with [get_esri_data()]}

\item{show_col_types}{If \code{FALSE}, do not show the guessed column types. If
\code{TRUE} always show the column types, even if they are supplied. If \code{NULL}
(the default) only show the column types if they are not explicitly supplied
by the \code{col_types} argument.}

\item{geojson}{string or vector of GeoJSON, or a URL or file pointing to a geojson file}

\item{id}{The name of a column in which to store the file path. This is
useful when reading multiple input files and there is data in the file
paths, such as the data collection date. If \code{NULL} (the default) no extra
column is created.}

\item{filename}{File name; if file name is \code{NULL}, name and file type are
both required.}

\item{prefix}{File name prefix. "date" adds a date prefix, "time" adds a
date/time prefix; defaults to \code{NULL}.}

\item{method}{Method to be used for downloading files.  Current
    download methods are \code{"internal"}, \code{"wininet"} (Windows
    only) \code{"libcurl"}, \code{"wget"} and \code{"curl"}, and there
    is a value \code{"auto"}: see \sQuote{Details} and \sQuote{Note}.

    The method can also be set through the option
    \code{"download.file.method"}: see \code{\link{options}()}.
  }

\item{unzip}{If `TRUE`, url must be a zip file that is downloaded, unzipped
into a temporary directory (created with [tempdir()]), and then read to a file using the specified
file type.}

\item{ss}{Something that identifies a Google Sheet:
\itemize{
\item its file id as a string or \code{\link[googledrive:as_id]{drive_id}}
\item a URL from which we can recover the id
\item a one-row \code{\link[googledrive:dribble]{dribble}}, which is how googledrive
represents Drive files
\item an instance of \code{googlesheets4_spreadsheet}, which is what \code{\link[googlesheets4:gs4_get]{gs4_get()}}
returns
}

Processed through \code{\link[googlesheets4:as_sheets_id]{as_sheets_id()}}.}

\item{ask}{If `TRUE`, ask for the name of the Google Sheet to read if ss is
not provided to [read_sf_gsheet].}
}
\description{
An extended version of [sf::read_sf()] that support reading spatial data
based on a file path, URL, or the data name and associated package.
Optionally provide a bounding box to filter data (not supported for all data
types). If a file path or url is provided for a GeoJSON file, the
[read_sf_geojson] function (using the suggested
[{geojsonsf}](https://github.com/SymbolixAU/geojsonsf) package) is used.
}
\details{
Reading data from a url:

[read_sf_url] supports multiple types of urls:

  - A MapServer or FeatureServer URL
  - A URL for a GitHub gist with a single spatial data file (first file used if gist contains multiple)
  - A URL for a spatial data file or a CSV file
  - A Google Sheets URL
  - A public Google Maps URL

Reading data from a package:

[read_sf_pkg] looks for three types of package data:

  - Data loaded with the package
  - External data in the `extdata` system files folder.
  - Cached data in the cache directory returned by [rappdirs::user_cache_dir]

Additional ... parameters:

[read_sf_pkg] and [read_sf_download] both pass additional parameters
to [read_sf_path] which supports query, name_col, name, and table. name and
name_col are ignored if a query parameter is provided. If table is not
provided, a expected layer name is created based on the file path.

[read_sf_url] pass the where, name_col, and name for any ArcGIS FeatureServer or
MapServer url (passed to [get_esri_data]) or sheet if the url is for a Google
Sheet (passed to [googlesheets4::read_sheet]), or a query or wkt filter
parameter if the url is some other type (passed to [sf::read_sf]).

[read_sf_ext] is a flexible function that only has bbox as a named parameter
and all other parameters in ... are passed to one of the other overedge
read_sf functions.
}
\seealso{
Other read_write: 
\code{\link{read_sf_exif}()}
}
\concept{read_write}
