% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_point.R
\name{as_points}
\alias{as_points}
\alias{as_point}
\alias{as_startpoints}
\alias{as_startpoint}
\alias{as_endpoints}
\alias{as_endpoint}
\alias{as_line}
\alias{as_lines}
\alias{as_polygons}
\alias{as_centroid}
\title{Convert an sf, numeric, or other object to a POINT (sfg) or POINT,
MULTIPOINT, LINESTRING, or MULTILINESTRING (sfc) object}
\usage{
as_point(..., to = "POINT")

as_points(..., to = "POINT", call = caller_env())

as_startpoint(x)

as_endpoint(x)

as_line(..., to = "LINESTRING", call = caller_env())

as_lines(..., to = "LINESTRING")

as_polygons(..., to = "POLYGON")

as_centroid(x, ...)
}
\arguments{
\item{...}{See details.}

\item{to}{The geometry type to return, either POINT or MULTIPOINT or
LINESTRING or MULTILINESTRING.}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}

\item{x}{A \code{sf}, \code{sfc}, or \code{bbox} object.}
}
\description{
Works with sf, sfc, and bbox objects using \code{\link[sf:geos_unary]{sf::st_centroid()}}. Works with
\code{\link[=sf_bbox_point]{sf_bbox_point()}}
}
\details{
Using as_point:

\code{\link[=as_point]{as_point()}} always returns a single point sfg object. The ... parameter is
passed to \code{\link[sf:geos_unary]{sf::st_centroid()}} if ... is a sf, sfc, or bbox object,
\code{\link[=sf_bbox_point]{sf_bbox_point()}} includes a bbox object and a string indicating the
requested point position, or \code{\link[sf:st]{sf::st_point()}} if ... includes a numeric
vector.

Using as_points:

\code{\link[=as_points]{as_points()}} always returns an sfc object. The parameters are passed to
as_point using \code{\link[purrr:map]{purrr::map()}} and then converted to sfc using
\code{\link[sf:st_as_sfc]{sf::st_as_sfc()}}. The ... parameters must include a crs, otherwise the crs
will be NA for the resulting sfc object.

Using \link{as_startpoint} and \link{as_endpoint}:

\code{\link[=as_startpoint]{as_startpoint()}} and \code{\link[=as_endpoint]{as_endpoint()}} require a LINESTRING OR MULTILINESTRING
geometry type sf or sfc object that is passed to \code{\link[lwgeom:st_startpoint]{lwgeom::st_startpoint()}} or
\code{\link[lwgeom:st_startpoint]{lwgeom::st_endpoint()}} respectively. Both functions always return a sfc
object matching the CRS of the input geometry.

Using \link{as_lines}:

If params do not have POINT or MULTIPOINT geometry, they are passed to
\code{\link[=as_points]{as_points()}} to convert to an \code{sfc} object. If the parameters have  POINT
geometry, they are combined to create a MULTIPOINT geometry.

For \code{\link[=as_lines]{as_lines()}} the ... parameters are passed to \code{\link[=as_points]{as_points()}} and/or
\code{\link[sf:st_cast]{sf::st_cast()}}.

Both as_line and as_lines do not consistently retain the coordinate reference
system of the original object but this should be improved in the future.

Using \code{\link[=as_centroid]{as_centroid()}}

\code{\link[=as_centroid]{as_centroid()}} always returns a sfc object with the same length and crs as
the input object.
}
\examples{
nc <- sf::read_sf(system.file("shape/nc.shp", package = "sf"))

as_point(nc)

as_point(c("xmax", "ymax"), bbox = as_bbox(nc))

as_points(nc)

as_points(nc[1, ], nc[2, ])

nc_line <- as_line(c(as_points(nc[1, ]), as_points(nc[10, ])))

as_startpoint(nc_line)

as_endpoint(nc_line)

as_centroid(nc)
}
