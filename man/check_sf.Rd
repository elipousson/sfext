% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-check.R
\name{check_sf}
\alias{check_sf}
\title{Check if x is an sf object}
\usage{
check_sf(
  x,
  arg = caller_arg(x),
  null.ok = FALSE,
  list.ok = FALSE,
  ext = FALSE,
  call = caller_env(),
  ...
)
}
\arguments{
\item{x}{An \code{sf}, \code{sfc}, or \code{bbox} object.}

\item{null.ok}{If \code{TRUE} and x is \code{NULL}, return \code{TRUE}; defaults to \code{FALSE}.}

\item{list.ok}{If TRUE, return TRUE if x is an sf list or, if ext is TRUE, a list of sf, sfc, or bbox objects. Defaults to FALSE.}

\item{ext}{If \code{TRUE}, check if x is a \code{sf}, \code{sfc}, or \code{bbox} class object or
not; defaults to \code{FALSE}. (used by \link{is_sf})}

\item{call}{The execution environment of a currently running
function, e.g. \code{call = caller_env()}. The corresponding function
call is retrieved and mentioned in error messages as the source
of the error.

You only need to supply \code{call} when throwing a condition from a
helper function which wouldn't be relevant to mention in the
message.

Can also be \code{NULL} or a \link[rlang:topic-defuse]{defused function call} to
respectively not display any call or hard-code a code to display.

For more information about error calls, see \ifelse{html}{\link[rlang:topic-error-call]{Including function calls in error messages}}{\link[rlang:topic-error-call]{Including function calls in error messages}}.}

\item{...}{
  Arguments passed on to \code{\link[cli:cli_abort]{cli::cli_abort}}
  \describe{
    \item{\code{message}}{It is formatted via a call to \code{\link[cli:cli_bullets]{cli_bullets()}}.}
    \item{\code{.envir}}{Environment to evaluate the glue expressions in.}
  }}
}
\description{
If x is an \code{sf} object invisibly return TRUE. If not, return an error with \link[cli:cli_abort]{cli::cli_abort}
}
