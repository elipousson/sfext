% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_sf.R
\name{check_sf}
\alias{check_sf}
\title{Check if x is an sf object}
\usage{
check_sf(
  x,
  ...,
  ext = FALSE,
  allow_list = FALSE,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)
}
\arguments{
\item{x}{An \code{sf}, \code{sfc}, or \code{bbox} object.}

\item{...}{Additional parameters passed to \code{\link[rlang:abort]{rlang::abort()}}.}

\item{ext}{If \code{TRUE}, check if x is a \code{sf}, \code{sfc}, or \code{bbox} class object or
not; defaults to \code{FALSE}. (used by \link{is_sf})}

\item{allow_list}{If \code{TRUE}, return \code{TRUE} if x is an sf list or, if ext is
also \code{TRUE}, a list of sf, sfc, or bbox objects. Defaults to \code{FALSE}.}

\item{allow_null}{If \code{TRUE} and x is \code{NULL}, return \code{TRUE}; defaults to \code{FALSE}.}

\item{arg}{An argument name as a string. This argument
will be mentioned in error messages as the input that is at the
origin of a problem.}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\description{
If x is an \code{sf} object invisibly return TRUE. If not, return an error with \link[cli:cli_abort]{cli::cli_abort}
}
