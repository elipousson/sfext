% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_sf_ext.R
\name{write_sf_ext}
\alias{write_sf_ext}
\alias{write_sf_list}
\alias{write_sf_cache}
\alias{write_sf_gist}
\alias{write_sf_gsheet}
\title{Write or cache a simple feature object to a file}
\usage{
write_sf_ext(
  data,
  name = NULL,
  label = NULL,
  prefix = NULL,
  postfix = NULL,
  filename = NULL,
  fileext = NULL,
  filetype = NULL,
  description = NULL,
  path = NULL,
  cache = FALSE,
  pkg = "sfext",
  overwrite = FALSE,
  onefile = FALSE,
  ...
)

write_sf_list(
  data,
  name = NULL,
  label = NULL,
  prefix = NULL,
  postfix = NULL,
  filename = NULL,
  fileext = NULL,
  filetype = NULL,
  path = NULL,
  overwrite = FALSE,
  onefile = FALSE,
  cache = FALSE,
  ...
)

write_sf_cache(
  data,
  name = NULL,
  label = NULL,
  prefix = NULL,
  postfix = NULL,
  filename = NULL,
  fileext = NULL,
  filetype = NULL,
  data_dir = NULL,
  pkg = "sfext",
  overwrite = FALSE,
  create = TRUE,
  ...
)

write_sf_gist(
  data,
  name = NULL,
  label = NULL,
  prefix = NULL,
  postfix = NULL,
  filename = NULL,
  fileext = "geojson",
  filetype = NULL,
  description = NULL,
  public = TRUE,
  browse = FALSE,
  token = Sys.getenv("GITHUB_PAT")
)

write_sf_gsheet(
  data,
  name = NULL,
  label = NULL,
  prefix = NULL,
  postfix = NULL,
  filename = NULL,
  sheet = 1,
  ask = FALSE,
  key = NULL,
  ...
)
}
\arguments{
\item{data}{A \code{sf} object, data frame, or other object to write.}

\item{name}{Name to make file name converted to snake case with
\code{\link[janitor:make_clean_names]{janitor::make_clean_names()}}, e.g. "Residential zoning map" becomes
"residential_zoning_map"}

\item{label}{Label to combine with name converted to snake case with
\code{\link[janitor:make_clean_names]{janitor::make_clean_names()}}. The label is designed to identify the area
or other shared characteristics across multiple data files, maps, or plots.}

\item{prefix}{File name prefix. "date" adds a date prefix, "time" adds a
date/time prefix; defaults to \code{NULL}.}

\item{postfix}{File name postfix; defaults to \code{NULL}.}

\item{filename, fileext, filetype}{File name and/or file extension to write.
filetype is superseded in favor of fileext. Both are optional if path
includes filename and type, e.g. "~/Documents/data.geojson". fileext can be
provided as part of the filename, e.g. "data.geojson". If a filename
includes a file extensions and a separate fileext is also provided, the
separate fileext parameter is used. Supported file extensions include
"csv", "xlsx", "gsheet" (writes a Google Sheet), "rda", or any fileext
supported by the available drivers (use \code{\link[sf:st_drivers]{sf::st_drivers()}} to list
drivers).}

\item{description}{(character) Brief description of gist (optional)}

\item{path}{Path to file or data directory.}

\item{cache}{If \code{TRUE}, write \code{sf} object to file in cache directory;
defaults to \code{FALSE}.}

\item{pkg}{The name of the package cache directory to use for
\link{write_sf_cache} or \link{write_sf_ext} if \code{cache = TRUE}.}

\item{overwrite}{Logical. Default \code{FALSE}. If \code{TRUE}, overwrite any existing
cached files that use the same file name.}

\item{onefile}{If \code{TRUE} and the fileext if "gpkg" (directly or from
filename), save a sf list as a multilayer GeoPackage file where names for
list items are used as layer names.}

\item{...}{If data is an sf object and the fileext is "csv" or "xlsx", the
... parameters are passed to \code{\link[=sf_to_df]{sf_to_df()}} or to \code{\link[sf:st_write]{sf::write_sf()}} otherwise. If
fileext is "rda" ... parameters are passed to \code{\link[readr:read_rds]{readr::write_rds()}}.}

\item{data_dir}{cache data directory, defaults to \code{\link[rappdirs:user_cache_dir]{rappdirs::user_cache_dir()}}
when data_dir is \code{NULL}. (only used for \code{\link[=write_sf_cache]{write_sf_cache()}}; default is used
when \code{cache = TRUE} for \code{\link[=write_sf_ext]{write_sf_ext()}})}

\item{create}{If \code{FALSE} and path does not exist, return path with a warning.
If \code{TRUE} and \code{\link[rlang:is_interactive]{rlang::is_interactive()}} is \code{TRUE}, ask user if directory
should be created. If the session not interactive and create is \code{TRUE}, a
new directory will be created.}

\item{public}{(logical) Whether gist is public (default: TRUE)}

\item{browse}{(logical) To open newly create gist in default browser
(default: TRUE)}

\item{token}{A personal access token on GitHub with permission to create
gists; defaults to Sys.getenv("GITHUB_PAT")}

\item{sheet}{Sheet to write into, in the sense of "worksheet" or "tab". You can identify a sheet by name, with a string, or by position, with a number.}

\item{ask}{If \code{TRUE}, the user is prompted to make revisions to the created
Google Sheet. When user responds to the prompt, the date is read back into
the environment using \link{read_sf_gsheet} and joined to the provided data with
the column name provided to key. Defaults to \code{FALSE}.}

\item{key}{If ask is \code{TRUE}, a key is required to join the sheet data to the
provided data.}
}
\description{
The write_sf_ext and write_sf_cache helper functions wrap the \code{\link[sf:st_write]{sf::write_sf()}}
function to provide some additional options including consistent file naming
with \code{\link[=make_filename]{make_filename()}} and features including:
}
\details{
\itemize{
\item If fileext is "csv", "xlsx", or "gsheet" the file is converted to a
dataframe using \code{\link[=df_to_sf]{df_to_sf()}}
\item If the data is not an \code{sf} object and none of these filenames are provided,
the user is prompted to save the file as an rda file with \code{\link[readr:read_rds]{readr::write_rds()}}.
\item If cache is \code{TRUE} use \code{\link[=write_sf_cache]{write_sf_cache()}} to cache file after writing a copy to
the path provided.
\item If data is a named sf list, pass the name of each sf object in the list to
the name parameter and keep all other parameters consistent to write a file
for each object in the list. No ... parameters are passed if data is an sf
list.
}
}
\seealso{
\code{\link[sf:st_write]{sf::st_write()}}
}
