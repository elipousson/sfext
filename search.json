[{"path":"https://elipousson.github.io/sfext/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Eli Pousson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/articles/introduction.html","id":"reading-sf-objects","dir":"Articles","previous_headings":"Reading and writing sf objects","what":"Reading sf objects","title":"Introduction to sfext","text":"read_sf_ext() calls one four functions depending input parameters: read_sf_path() read_sf_url() read_sf_pkg() read_sf_query() read_sf_path() similar sf::read_sf additional features. checks existence file reading, supports creation wkt_filter parameters based bounding box, supports conversion tabular data simple feature objects.  second, read_sf_url(), supports reading url already supported sf::read_sf also supports ArcGIS Feature Layers (using {esri2sf} package) URLs tabular data (including CSV files Google Sheets). Several functions also support queries based name name_col value (generating simple SQL query) based provided values.  read functions also support URLs GitHub Gists (assuming first file Gist spatial data file) Google MyMaps.  third, read_sf_pkg(), can load spatial data installed package including exported data, files extdata folder, data package-specific cache folder. particularly useful working spatial data packages {mapbaltimore} {mapmaryland}. fourth, read_sf_query(), similar sf::read_sf provides optional spatial filter based bbox parameter supports creation queries using basic name name_col parameter.","code":"nc <- read_sf_ext(path = system.file(\"shape/nc.shp\", package = \"sf\")) # This is equivalent to read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\")) # Or sf::read_sf(dsn = system.file(\"shape/nc.shp\", package = \"sf\"))  glimpse(nc) #> Rows: 100 #> Columns: 15 #> $ AREA      <dbl> 0.114, 0.061, 0.143, 0.070, 0.153, 0.097, 0.062, 0.091, 0.11… #> $ PERIMETER <dbl> 1.442, 1.231, 1.630, 2.968, 2.206, 1.670, 1.547, 1.284, 1.42… #> $ CNTY_     <dbl> 1825, 1827, 1828, 1831, 1832, 1833, 1834, 1835, 1836, 1837, … #> $ CNTY_ID   <dbl> 1825, 1827, 1828, 1831, 1832, 1833, 1834, 1835, 1836, 1837, … #> $ NAME      <chr> \"Ashe\", \"Alleghany\", \"Surry\", \"Currituck\", \"Northampton\", \"H… #> $ FIPS      <chr> \"37009\", \"37005\", \"37171\", \"37053\", \"37131\", \"37091\", \"37029… #> $ FIPSNO    <dbl> 37009, 37005, 37171, 37053, 37131, 37091, 37029, 37073, 3718… #> $ CRESS_ID  <int> 5, 3, 86, 27, 66, 46, 15, 37, 93, 85, 17, 79, 39, 73, 91, 42… #> $ BIR74     <dbl> 1091, 487, 3188, 508, 1421, 1452, 286, 420, 968, 1612, 1035,… #> $ SID74     <dbl> 1, 0, 5, 1, 9, 7, 0, 0, 4, 1, 2, 16, 4, 4, 4, 18, 3, 4, 1, 1… #> $ NWBIR74   <dbl> 10, 10, 208, 123, 1066, 954, 115, 254, 748, 160, 550, 1243, … #> $ BIR79     <dbl> 1364, 542, 3616, 830, 1606, 1838, 350, 594, 1190, 2038, 1253… #> $ SID79     <dbl> 0, 3, 6, 2, 3, 5, 2, 2, 2, 5, 2, 5, 4, 4, 6, 17, 4, 7, 1, 0,… #> $ NWBIR79   <dbl> 19, 12, 260, 145, 1197, 1237, 139, 371, 844, 176, 597, 1369,… #> $ geometry  <MULTIPOLYGON [°]> MULTIPOLYGON (((-81.47276 3..., MULTIPOLYGON ((… bbox <- as_bbox(nc[10, ])  nc_in_bbox <- read_sf_ext(path = system.file(\"shape/nc.shp\", package = \"sf\"), bbox = bbox)  nc_basemap <-   ggplot() +   geom_sf(data = nc)  nc_basemap +   geom_sf(data = nc_in_bbox, fill = \"red\") sample_esri_url <- \"https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/USA_States_Generalized_Boundaries/FeatureServer/0\" states <- read_sf_esri(url = sample_esri_url) #> Layer Type: Feature Layer #> Geometry Type: esriGeometryPolygon #> Service Coordinate Reference System: 4326 #> Warning in getEsriFeatures(queryUrl, outFields, where, bbox, token, crs, : No #> records match the search criteria. # This is equivalent to read_sf_url(sample_esri_url) # Or esri2sf::esri2sf(url = sample_esri_url)  # read_sf_esri and read_sf_query both support the name and name_col parameters # These parameters also work with read_sf_pkg for cached and extdata files nc_esri <- read_sf_ext(url = sample_esri_url, name_col = \"STATE_NAME\", name = \"North Carolina\") #> Layer Type: Feature Layer #> Geometry Type: esriGeometryPolygon #> Service Coordinate Reference System: 4326 #> Warning: Package \"pbapply\" needed to use the progress argument. Please install #> it. Setting `progress` to FALSE.  ggplot() +   geom_sf(data = states) +   geom_sf(data = nc_esri, fill = \"red\") gmap_data <- read_sf_ext(url = \"https://www.google.com/maps/d/u/0/viewer?mid=1CEssu_neU7lx_vAZs5qpufOBoUQ&ll=-3.81666561775622e-14%2C0&z=1\")  ggplot() +   geom_sf(data = gmap_data[2, ])"},{"path":"https://elipousson.github.io/sfext/articles/introduction.html","id":"writing-sf-objects","dir":"Articles","previous_headings":"Reading and writing sf objects","what":"Writing sf objects","title":"Introduction to sfext","text":"write_sf_ext() wraps sf::write_sf uses make_filename() support creation consistent file names using labels date prefixes organize exports. write_sf_ext() also supports automatic creation destination folders use package-specific cache folder created rappdirs::user_cache_dir().","code":"make_filename(   name = \"Ashe County\",   label = \"NC\",   prefix = \"date\",   filetype = \"gpkg\" ) #> [1] \"2022-07-15_nc_ashe_county.gpkg\" get_data_dir(path = \"example_path/to_folder\", create = FALSE) #> Warning: The provided `path` example_path/to_folder does not #> exist. #> [1] \"example_path/to_folder\"  get_data_dir(cache = TRUE) #> ✔ New directory created at ~/.cache/sfext"},{"path":[]},{"path":"https://elipousson.github.io/sfext/articles/introduction.html","id":"checking-and-converting-sf-objects","dir":"Articles","previous_headings":"Converting sf objects","what":"Checking and converting sf objects","title":"Introduction to sfext","text":"several helper functions used extensively package . conversions easy existing {sf} functions, alternatives follow tidyverse style syntax support wider range input values. ext parameter can used make is_sf() general allowing sf, sfc, bbox objects instead just sf objects. similar functions checking converting geometry type object including is_point(), is_polygon(), is_line(), others.","code":"is_sf(nc) #> [1] TRUE  is_sfc(nc$geometry) #> [1] TRUE  nc_bbox <- as_bbox(nc)  is_bbox(nc_bbox) #> [1] TRUE is_sf(nc$geometry) #> [1] FALSE  is_sf(nc$geometry, ext = TRUE) #> [1] TRUE is_point(nc) #> [1] FALSE  is_point(suppressWarnings(sf::st_centroid(nc))) #> [1] TRUE  # as_point returns an sfg object is_sfg(as_point(nc)) #> [1] TRUE  # as_points returns an sfc object (and accepts numeric inputs as well as sfg) is_sfc(as_points(c(-79.40065, 35.55937), crs = 4326)) #> [1] TRUE"},{"path":"https://elipousson.github.io/sfext/articles/introduction.html","id":"converting-to-and-from-data-frames","dir":"Articles","previous_headings":"Converting sf objects","what":"Converting to and from data frames","title":"Introduction to sfext","text":"default conversion sf data frame object, uses centroid polygon. can also use surface point sf::st_point_on_surface can converted back sf object point geometry used instead original polygon:  Alternatively, sf_to_df() can also use well known text output format: {tidygeocoder} package also used support conversion address vectors data frames.","code":"df_centroid <- sf_to_df(nc_in_bbox) df_surface_point <- sf_to_df(nc_in_bbox, geometry = \"surface point\") df_centroid_sf <- df_to_sf(df_centroid, crs = 3857) df_surface_point_sf <- df_to_sf(df_surface_point, crs = 3857)  df_example_map <-   ggplot() +   geom_sf(data = nc_in_bbox) +   geom_sf(data = df_centroid_sf, color = \"red\", size = 3) +   geom_sf(data = df_surface_point_sf, color = \"blue\", size = 2)  df_example_map df_wkt <- sf_to_df(nc_in_bbox, geometry = \"wkt\")  glimpse(df_wkt) #> Rows: 5 #> Columns: 15 #> $ AREA      <dbl> 0.143, 0.124, 0.153, 0.108, 0.170 #> $ PERIMETER <dbl> 1.630, 1.428, 1.616, 1.483, 1.680 #> $ CNTY_     <dbl> 1828, 1837, 1839, 1900, 1903 #> $ CNTY_ID   <dbl> 1828, 1837, 1839, 1900, 1903 #> $ NAME      <chr> \"Surry\", \"Stokes\", \"Rockingham\", \"Forsyth\", \"Guilford\" #> $ FIPS      <chr> \"37171\", \"37169\", \"37157\", \"37067\", \"37081\" #> $ FIPSNO    <dbl> 37171, 37169, 37157, 37067, 37081 #> $ CRESS_ID  <int> 86, 85, 79, 34, 41 #> $ BIR74     <dbl> 3188, 1612, 4449, 11858, 16184 #> $ SID74     <dbl> 5, 1, 16, 10, 23 #> $ NWBIR74   <dbl> 208, 160, 1243, 3919, 5483 #> $ BIR79     <dbl> 3616, 2038, 5386, 15704, 20543 #> $ SID79     <dbl> 6, 5, 5, 18, 38 #> $ NWBIR79   <dbl> 260, 176, 1369, 5031, 7089 #> $ wkt       <chr> \"POLYGON ((-80.45612 36.2427, -80.47617 36.25487, -80.53666 …  df_example_map +   geom_sf(data = df_to_sf(df_wkt), color = \"orange\", fill = NA) address_to_sf(x = c(\"350 Fifth Avenue, New York, NY 10118\")) #> Passing 1 address to the Nominatim single address geocoder #> Query completed in: 1.8 seconds #> Simple feature collection with 1 feature and 3 fields #> Attribute-geometry relationship: 3 constant, 0 aggregate, 0 identity #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -72.366 ymin: 41.10334 xmax: -72.366 ymax: 41.10334 #> Geodetic CRS:  WGS 84 #> # A tibble: 1 × 4 #>   address                                lat   lon           geometry #> * <chr>                                <dbl> <dbl>        <POINT [°]> #> 1 350 Fifth Avenue, New York, NY 10118  41.1 -72.4 (-72.366 41.10334)"},{"path":"https://elipousson.github.io/sfext/articles/introduction.html","id":"modifying-sf-objects","dir":"Articles","previous_headings":"","what":"Modifying sf objects","title":"Introduction to sfext","text":"next group functions often provide similar functionality standard {sf} functions , , allow wider range inputs outputs offer extra features. example, st_bbox_ext() also wraps sf::st_buffer uses helper function based units::set_units buffer distance valid distance unit.  notable functions category include: st_transform_ext(): takes sf, sfc, bbox objects crs parameter sf::st_transform() supports lists sf objects (look list.ok = TRUE parameter see functions support lists) st_union_ext(): unions geometry also collapsing name column single character string using cli::pluralize function st_erase(): checks validity inputs sf::st_is_valid using sf::st_difference (flip = TRUE) sf::st_difference","code":"nc_bbox <- st_bbox_ext(nc, class = \"sf\") # Similar to sf::st_sf(sf::st_as_sfc(sf::st_bbox(nc)))  nc_bbox_buffer <- st_bbox_ext(nc, dist = 50, unit = \"mi\", class = \"sf\") # Similar to sf::st_buffer(nc, dist = units::as_units(50, \"mi\"))  nc_basemap +   geom_sf(data = nc_bbox, fill = NA, color = \"blue\") +   geom_sf(data = nc_bbox_buffer, fill = NA, color = \"red\")"},{"path":"https://elipousson.github.io/sfext/articles/introduction.html","id":"getting-information-about-sf-sfc-and-bbox-objects","dir":"Articles","previous_headings":"","what":"Getting information about sf, sfc, and bbox objects","title":"Introduction to sfext","text":"also several functions return information geometry input objects. Typically, functions bind information new column existing sf input (convert sfc input objects sf results). get_length() function wraps sf::st_length (POLYGON geometries ) lwgeom::st_perimeter: get_area() function wraps sf::st_area: get_dist() supports varied range options including using “” parameter define corner center input sf object bounding box.","code":"example_line <- as_line(as_point(nc[1,]), as_point(nc[2,]), crs = 4326)  glimpse(get_length(example_line)) #> Rows: 1 #> Columns: 2 #> $ length   [m] 34020.35 [m] #> $ geometry <LINESTRING [°]> LINESTRING (-81.49823 36.43... glimpse(get_area(nc[1:3,], unit = \"mi^2\")) #> Rows: 3 #> Columns: 16 #> $ AREA      <dbl> 0.114, 0.061, 0.143 #> $ PERIMETER <dbl> 1.442, 1.231, 1.630 #> $ CNTY_     <dbl> 1825, 1827, 1828 #> $ CNTY_ID   <dbl> 1825, 1827, 1828 #> $ NAME      <chr> \"Ashe\", \"Alleghany\", \"Surry\" #> $ FIPS      <chr> \"37009\", \"37005\", \"37171\" #> $ FIPSNO    <dbl> 37009, 37005, 37171 #> $ CRESS_ID  <int> 5, 3, 86 #> $ BIR74     <dbl> 1091, 487, 3188 #> $ SID74     <dbl> 1, 0, 5 #> $ NWBIR74   <dbl> 10, 10, 208 #> $ BIR79     <dbl> 1364, 542, 3616 #> $ SID79     <dbl> 0, 3, 6 #> $ NWBIR79   <dbl> 19, 12, 260 #> $ area      [mi^2] 439.0398 [mi^2], 235.8760 [mi^2], 549.4795 [mi^2] #> $ geometry  <MULTIPOLYGON [°]> MULTIPOLYGON (((-81.47276 3..., MULTIPOLYGON (((-81.23989 3.… # use drop = TRUE, to drop the units class and return a numeric column dist_example_min <- get_dist(nc, to = c(\"xmin\", \"ymin\"), unit = \"mi\", drop = TRUE)  glimpse(select(dist_example_min, NAME, dist)) #> Rows: 100 #> Columns: 3 #> $ NAME     <chr> \"Ashe\", \"Alleghany\", \"Surry\", \"Currituck\", \"Northampton\", \"He… #> $ dist     <dbl> 237.6835, 255.1623, 269.8047, 499.9448, 428.0397, 448.0652, 4… #> $ geometry <MULTIPOLYGON [°]> MULTIPOLYGON (((-81.47276 3..., MULTIPOLYGON (((…  nc_basemap +   geom_sf(data = dist_example_min, aes(fill = dist), alpha = 0.5) dist_example_mid <- get_dist(nc, to = c(\"xmid\", \"ymid\"), unit = \"mi\", drop = TRUE)  nc_basemap +   geom_sf(data = dist_example_mid, aes(fill = dist), alpha = 0.5)"},{"path":"https://elipousson.github.io/sfext/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/sfext/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2022). sfext: Extra Functions Simple Feature Data. https://github.com/elipousson/sfext, https://elipousson.github.io/sfext/.","code":"@Manual{,   title = {sfext: Extra Functions for Simple Feature Data},   author = {Eli Pousson},   year = {2022},   note = {https://github.com/elipousson/sfext, https://elipousson.github.io/sfext/}, }"},{"path":"https://elipousson.github.io/sfext/index.html","id":"sfext-","dir":"","previous_headings":"","what":"Extra Functions for Simple Feature Data","title":"Extra Functions for Simple Feature Data","text":"goal sfext extend existing functions {sf} package offer range additional options working simple feature objects, bounding boxes, data frame objects coordinates spatial information.","code":""},{"path":"https://elipousson.github.io/sfext/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extra Functions for Simple Feature Data","text":"can install development version sfext like :","code":"# pak::pkg_install(\"elipousson/sfext\")"},{"path":"https://elipousson.github.io/sfext/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Extra Functions for Simple Feature Data","text":"Get data read_sf_ext related functions: Combine data st_union_ext: Make grids set rows, columns, aspect ratios using st_make_grid_ext:","code":"library(ggplot2) library(sfext)  theme_set(theme_void()) nc <- read_sf_ext(path = system.file(\"shape/nc.shp\", package = \"sf\")) random_id <- sample(nrow(nc), size = 8) nc_union <- st_union_ext(nc[random_id,], name_col = \"NAME\")  ggplot() +   geom_sf(data = nc_union, aes(fill = NAME), alpha = 0.2) +   geom_sf_label(data = nc[random_id,], aes(label = NAME), size = 2) +   theme(legend.position=\"bottom\") #> Warning in st_point_on_surface.sfc(sf::st_zm(x)): st_point_on_surface may not #> give correct results for longitude/latitude data # Make a 5 by 5 grid with a 8.5 by 11 aspect ratio filtered to x plot(   st_make_grid_ext(     x = nc[24, ],     asp = 8.5 / 11,     ncol = 5,     nrow = 5,     filter = TRUE   ) )"},{"path":"https://elipousson.github.io/sfext/reference/address_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tidygeocoder to convert an address or data frame with an address column\nto an sf object — address_to_sf","title":"Use tidygeocoder to convert an address or data frame with an address column\nto an sf object — address_to_sf","text":"Wraps tidygeocoder::geo tidygeocoder::geocode convert character string data frame address column. Additional parameters passed tidygeocoder::geocode passes ... parameters tidygeocoder::geo.","code":""},{"path":"https://elipousson.github.io/sfext/reference/address_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tidygeocoder to convert an address or data frame with an address column\nto an sf object — address_to_sf","text":"","code":"address_to_sf(   x,   address = \"address\",   method = \"osm\",   coords = c(\"lon\", \"lat\"),   remove_coords = FALSE,   crs = NULL,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/address_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tidygeocoder to convert an address or data frame with an address column\nto an sf object — address_to_sf","text":"x Data frame address column. Multiple address columns currently supported. address Address column name, Default: 'address' method geocoding service used. API keys loaded environmental variables. Run usethis::edit_r_environ() open .Renviron file add API key environmental variable. example, add line GEOCODIO_API_KEY=\"YourAPIKeyHere\". \"osm\": Nominatim. \"census\": US Census. Geographic coverage limited United States.  Batch geocoding supported. \"arcgis\": ArcGIS. \"geocodio\": Geocodio. Geographic coverage limited United States Canada. API key must stored environmental variable \"GEOCODIO_API_KEY\". Batch geocoding supported. \"iq\": Location IQ.  API key must stored environmental variable \"LOCATIONIQ_API_KEY\". \"google\": Google.  API key must stored environmental variable \"GOOGLEGEOCODE_API_KEY\". \"opencage\": OpenCage.  API key must stored environmental variable \"OPENCAGE_KEY\". \"mapbox\": Mapbox.  API key must stored environmental variable \"MAPBOX_API_KEY\". \"\": .  API key must stored environmental variable \"HERE_API_KEY\". Batch geocoding supported, must explicitly called mode = \"batch\". \"tomtom\": TomTom.  API key must stored environmental variable \"TOMTOM_API_KEY\". Batch geocoding supported. \"mapquest\": MapQuest.  API key must stored environmental variable \"MAPQUEST_API_KEY\". Batch geocoding supported. \"bing\": Bing.  API key must stored environmental variable \"BINGMAPS_API_KEY\". Batch geocoding supported, must explicitly called mode = \"batch\". \"geoapify\": Geoapify.  API key must stored environmental variable \"GEOAPIFY_KEY\". \"cascade\"  use geocode_combine geo_combine instead. \"cascade\" method first uses one geocoding service uses second geocoding service first service return results. services order specified cascade_order argument. Note compatible full_results = TRUE geocoding services different columns return. coords Coordinate columns input dataframe output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). remove_coords df_to_sf, TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. crs Cordinate reference system return, Default: 4326 sf_to_df NULL df_to_sf. ... Arguments passed tidygeocoder::geocode .tbl dataframe containing addresses street street address column name city city column name county county column name state state column name postalcode postalcode column name (zip code United States) country country column name lat latitude column name. Can quoted unquoted (ie. lat 'lat'). long longitude column name. Can quoted unquoted (ie. long 'long'). return_input TRUE input dataset combined geocoder query results returned. FALSE geocoder results returned. limit maximum number results return per input address. many geocoding services maximum value limit parameter 100. Pass limit = NULL use default limit value selected geocoding service. batch geocoding, limit must set 1 (default) return_addresses = TRUE. use limit > 1 limit = NULL set return_input FALSE. Refer api_parameter_reference details. return_addresses TRUE return input addresses. Defaults TRUE return_input FALSE FALSE return_input TRUE. argument passed geo() function. unique_only TRUE unique results returned return_input set FALSE.","code":""},{"path":"https://elipousson.github.io/sfext/reference/address_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tidygeocoder to convert an address or data frame with an address column\nto an sf object — address_to_sf","text":"sf object POINT geometry geocoded addresses valid coordinates.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/area_unit_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Area units (vector) — area_unit_options","title":"Area units (vector) — area_unit_options","text":"vector supported area units derived dist_units units::valid_udunits.","code":""},{"path":"https://elipousson.github.io/sfext/reference/area_unit_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area units (vector) — area_unit_options","text":"","code":"area_unit_options"},{"path":"https://elipousson.github.io/sfext/reference/area_unit_options.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Area units (vector) — area_unit_options","text":"character vector 35 names, plural names, aliases area units.","code":""},{"path":"https://elipousson.github.io/sfext/reference/as_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an sf, numeric, or other object to a POINT (sfg) or POINT, MULTIPOINT, LINESTRING, or MULTILINESTRING (sfc) object — as_points","title":"Convert an sf, numeric, or other object to a POINT (sfg) or POINT, MULTIPOINT, LINESTRING, or MULTILINESTRING (sfc) object — as_points","text":"Works sf, sfc, bbox objects using sf::st_centroid. Works sf_bbox_point","code":""},{"path":"https://elipousson.github.io/sfext/reference/as_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an sf, numeric, or other object to a POINT (sfg) or POINT, MULTIPOINT, LINESTRING, or MULTILINESTRING (sfc) object — as_points","text":"","code":"as_point(..., to = \"POINT\")  as_points(..., to = \"POINT\", call = caller_env())  as_startpoint(...)  as_endpoint(...)  as_line(..., to = \"LINESTRING\", call = caller_env())  as_lines(..., to = \"LINESTRING\")  as_polygons(..., to = \"POLYGON\")"},{"path":"https://elipousson.github.io/sfext/reference/as_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an sf, numeric, or other object to a POINT (sfg) or POINT, MULTIPOINT, LINESTRING, or MULTILINESTRING (sfc) object — as_points","text":"... See details. geometry type return, either POINT MULTIPOINT LINESTRING MULTILINESTRING. call Passed call parameter cli::cli_abort rlang::arg_match improve error messages function used internally.","code":""},{"path":"https://elipousson.github.io/sfext/reference/as_point.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an sf, numeric, or other object to a POINT (sfg) or POINT, MULTIPOINT, LINESTRING, or MULTILINESTRING (sfc) object — as_points","text":"Using as_point: as_point, ... passed sf::st_centroid ... sf, sfc, bbox object, sf_bbox_point includes bbox object string indicating requested point position, sf::st_point ... includes numeric vector. Using as_points: as_points parameters passed as_point using purrr::map converted sfc using sf::st_as_sfc. ... parameters must include crs, otherwise crs NA resulting sfc object. Using as_startpoint as_endpoint: as_startpoint as_endpoint require line parameter passed lwgeom::st_startpoint lwgeom::st_endpoint respectively. functions always return sfc object matching CRS input geometry. Using as_lines: params POINT MULTIPOINT geometry, passed as_points convert sfc object. parameters  POINT geometry, combined create MULTIPOINT geometry. as_lines ... parameters passed as_points /sf::st_cast. as_line as_lines consistently retain coordinate reference system original object improved future.","code":""},{"path":"https://elipousson.github.io/sfext/reference/as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object to a simple feature or bounding box object — as_sf","title":"Convert an object to a simple feature or bounding box object — as_sf","text":"functions pass NULL value without returning error. POINT MULTIPOINT object passed as_bbox 0.00000001 meter buffer applied.","code":""},{"path":"https://elipousson.github.io/sfext/reference/as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object to a simple feature or bounding box object — as_sf","text":"","code":"as_sf(x, crs = NULL, sf_col = \"geometry\", ext = TRUE, ...)  as_bbox(x, crs = NULL, ext = TRUE, ...)  as_sfc(x, crs = NULL, ext = TRUE, ...)  as_sf_list(x, nm = \"data\", col = NULL, crs = NULL, clean_names = TRUE)  as_sf_class(x, class = NULL, null.ok = TRUE, call = caller_env(), ...)"},{"path":"https://elipousson.github.io/sfext/reference/as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object to a simple feature or bounding box object — as_sf","text":"x sf, bbox, sfc, raster, sp, data frame object can converted simple feature bounding box object. as_bbox() can also convert vector xmin, ymin, xmax, ymax values. as_sf_list() supports sf objects data frames sf list column named \"data\" (typically created using dplyr::group_nest() sf object. crs Coordinate reference system sf, bbox, sfc sf list object return. sf_col column name use geometry column created as_sf; defaults \"geometry\". ... Additional parameters passed as_sf, as_sfc, as_bbox, as_sf_list nm as_sf_list, name(s) sf list; defaults \"data\". col provided, values grouping column used names. col as_sf_list, name column used group data x sf object used group nest data passing x. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. class class convert data ; defaults NULL (returns \"sf\") call Passed call parameter cli::cli_abort rlang::arg_match improve error messages function used internally. data Data can converted sf, sfc, bbox sf list object.","code":""},{"path":"https://elipousson.github.io/sfext/reference/bind_units_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind units column to data frame — bind_units_col","title":"Bind units column to data frame — bind_units_col","text":"Utility function supporting get_area, get_dist, get_bearing.","code":""},{"path":"https://elipousson.github.io/sfext/reference/bind_units_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind units column to data frame — bind_units_col","text":"","code":"bind_units_col(   x,   y,   units = NULL,   drop = FALSE,   keep_all = TRUE,   .id = NULL,   call = caller_env() )"},{"path":"https://elipousson.github.io/sfext/reference/bind_units_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind units column to data frame — bind_units_col","text":"x Data frame sf object. y Vector numeric units values bind x. units Units use y (numeric) convert (y units class); defaults NULL. drop TRUE, apply units::drop_units function column units class values return numeric values instead; defaults FALSE. keep_all FALSE, keep columns. FALSE, return named .id column. .id Name use vector units provided \"y\" parameter, \"y\" bound \"x\" data frame tibble new column. call Passed call parameter cli::cli_abort improve error messages function used internally.","code":""},{"path":"https://elipousson.github.io/sfext/reference/check_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if x is an sf object — check_sf","title":"Check if x is an sf object — check_sf","text":"x sf object invisibly return TRUE. , return error cli::cli_abort","code":""},{"path":"https://elipousson.github.io/sfext/reference/check_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if x is an sf object — check_sf","text":"","code":"check_sf(   x,   arg = caller_arg(x),   null.ok = FALSE,   list.ok = FALSE,   ext = FALSE,   call = caller_env(),   ... )"},{"path":"https://elipousson.github.io/sfext/reference/check_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if x is an sf object — check_sf","text":"x sf, sfc, bbox object. null.ok TRUE x NULL, return TRUE; defaults FALSE. list.ok TRUE, return TRUE x sf list , ext TRUE, list sf, sfc, bbox objects. Defaults FALSE. ext TRUE, check x sf, sfc, bbox class object ; defaults FALSE. (used is_sf) call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages. ... Arguments passed cli::cli_abort message formatted via call cli_bullets(). .envir Environment evaluate glue expressions .","code":""},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert distance from scale to actual units — convert_dist_scale","title":"Convert distance from scale to actual units — convert_dist_scale","text":"Convert distance scale actual units based named standard_scales","code":""},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert distance from scale to actual units — convert_dist_scale","text":"","code":"convert_dist_scale(   dist = NULL,   paper = NULL,   orientation = NULL,   scale = NULL,   scale_unit = \"in\",   actual_unit = NULL,   scale_factor = NULL,   dpi = 120,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert distance from scale to actual units — convert_dist_scale","text":"dist distance convert. paper provided, paper width height used dist. paper Paper, Default: 'letter'. orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait'. scale Scale name scale_unit \"mm\" (converted cm dividing 10), \"cm\", \"px\" (converted inches dividing dpi), \"\". actual_unit unit supported convert_dist_units scale_factor factor converting scale_unit actual_unit, e.g. 1\" = 1', scale factor 12. optional scale provided; defaults NULL. dpi dots per square inch (used conversion factor \"px\" \"\") ... Arguments passed get_paper standard Size standard, \"ANSI\", \"ISO\", \"British Imperial\", \"JIS\", \"USPS\", \"Facebook\", \"Instagram\", \"Twitter\". series Size series (e.g. ), Default: NULL size Size number (used \"ISO\" \"JIS\" series). Standard, series, size may required return single paper using parameters. width,height Width height units, Default: NULL. units Paper size units, either \"\", \"mm\", \"px\"; defaults NULL (using \"\" width height provided). ncol,nrow Number expected columns rows paper; used determine row_height section_asp paper data frame returned get_paper nrow ncol greater 1; defaults NULL. gutter Gutter distance units. Gutter used spacing nrow columns (variable spacing currently supported); defaults 0. margin numeric vector ggplot2 margin object. bbox bounding box use get orientation using sf_bbox_asp() orientation = TRUE.","code":""},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert distance from scale to actual units — convert_dist_scale","text":"dist values converted scale_unit actual_unit based scale_factor information standard_scales object. paper provided, return data frame converted distances actual_width actual_height","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert distance (and area) values between different units — convert_dist_units","title":"Convert distance (and area) values between different units — convert_dist_units","text":"Convert distance (area) values different units","code":""},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert distance (and area) values between different units — convert_dist_units","text":"","code":"convert_dist_units(   dist,   from = NULL,   to = \"meter\",   drop = FALSE,   digits = NULL )"},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert distance (and area) values between different units — convert_dist_units","text":"dist Numeric units object Existing unit dist, Default: NULL. dist units object, numerator used \"\" Unit convert distance , Default: 'meter' drop TRUE, return numeric. FALSE, return class object. digits Number digits include result; defaults NULL.","code":""},{"path":"https://elipousson.github.io/sfext/reference/convert_dist_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert distance (and area) values between different units — convert_dist_units","text":"Object created units::set_units()","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/count_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Count simple features based on relationship with a second simple feature object — count_features","title":"Count simple features based on relationship with a second simple feature object — count_features","text":"Use st_join_ext dplyr::count count features x based spatial relationship y.","code":""},{"path":"https://elipousson.github.io/sfext/reference/count_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count simple features based on relationship with a second simple feature object — count_features","text":"","code":"count_features(   x = NULL,   y = NULL,   nm = \"data\",   join = NULL,   .id = \"name\",   by = NULL,   count = NULL,   sort = FALSE,   name = NULL,   geometry = \"y\",   ... )"},{"path":"https://elipousson.github.io/sfext/reference/count_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count simple features based on relationship with a second simple feature object — count_features","text":"x Data frame sf object, Default: NULL y Length 1 named sf list (name y used count count NULL) sf object nm NULL. y must include column name matching value .id. y NULL, count required. Default: NULL join geometry predicate function; defaults NULL, set sf::st_intersects key_list contains POLYGON MULTIPOLYGON objects sf::st_nearest_feature key_list contains types. .id Column name values added column input sf object. character vector variables join passed dplyr::left_join. count Name column count. NULL, count set names(y) (assuming y length 1 named sf list). sort TRUE, show largest groups top. name name new column output. omitted, default n. already column called n, error, require specify name. geometry \"y\", replace x geometry y geometry joining based . NULL, set value count. ... Additional parameters passed st_join_ext","code":""},{"path":"https://elipousson.github.io/sfext/reference/dist_unit_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance units (vector) — dist_unit_options","title":"Distance units (vector) — dist_unit_options","text":"vector supported distance units pulled dist_units.","code":""},{"path":"https://elipousson.github.io/sfext/reference/dist_unit_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance units (vector) — dist_unit_options","text":"","code":"dist_unit_options"},{"path":"https://elipousson.github.io/sfext/reference/dist_unit_options.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distance units (vector) — dist_unit_options","text":"character vector 55 names, plural names, aliases, symbols distance units.","code":""},{"path":"https://elipousson.github.io/sfext/reference/dist_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance units (data frame) — dist_units","title":"Distance units (data frame) — dist_units","text":"subset units supported units package accessible units::valid_udunits function.","code":""},{"path":"https://elipousson.github.io/sfext/reference/dist_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance units (data frame) — dist_units","text":"","code":"dist_units"},{"path":"https://elipousson.github.io/sfext/reference/dist_units.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distance units (data frame) — dist_units","text":"data frame 11 rows 11 variables: symbol symbols symbol_aliases symbol aliases name_singular singular names name_singular_aliases singular name aliases name_plural character plural names name_plural_aliases plural name aliases def short definition definition definition comment comment dimensionless logical indicator dimensionless units source_xml source XML","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_asp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get aspect ratio from string or based on specific paper and margins — get_asp","title":"Get aspect ratio from string or based on specific paper and margins — get_asp","text":"Get aspect ratio string based specific paper margins","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_asp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get aspect ratio from string or based on specific paper and margins — get_asp","text":"","code":"get_asp(   asp = NULL,   paper = NULL,   orientation = NULL,   bbox = NULL,   margin = NULL,   block_asp = FALSE,   null.ok = TRUE,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/get_asp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get aspect ratio from string or based on specific paper and margins — get_asp","text":"asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. paper Paper, Default: 'letter'. orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait'. bbox bounding box use get orientation using sf_bbox_asp() orientation = TRUE. margin numeric vector ggplot2 margin object. ... Arguments passed get_paper standard Size standard, \"ANSI\", \"ISO\", \"British Imperial\", \"JIS\", \"USPS\", \"Facebook\", \"Instagram\", \"Twitter\". series Size series (e.g. ), Default: NULL size Size number (used \"ISO\" \"JIS\" series). Standard, series, size may required return single paper using parameters. width,height Width height units, Default: NULL. units Paper size units, either \"\", \"mm\", \"px\"; defaults NULL (using \"\" width height provided). ncol,nrow Number expected columns rows paper; used determine row_height section_asp paper data frame returned get_paper nrow ncol greater 1; defaults NULL. gutter Gutter distance units. Gutter used spacing nrow columns (variable spacing currently supported); defaults 0.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_asp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get aspect ratio from string or based on specific paper and margins — get_asp","text":"numeric aspect ratio.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"Get coordinates for a simple feature or bounding box object — get_coords","title":"Get coordinates for a simple feature or bounding box object — get_coords","text":"extended version sf::st_coordinates supports binding coordinates object, optionally dropping geometry, returning wkt point surface (geometry = \"surface point\") instead centroid.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get coordinates for a simple feature or bounding box object — get_coords","text":"","code":"get_coords(   x,   coords = NULL,   geometry = \"centroid\",   crs = NULL,   keep_all = TRUE,   drop = TRUE,   call = caller_env() )  get_minmax(x, crs = NULL, keep_all = TRUE, drop = TRUE)"},{"path":"https://elipousson.github.io/sfext/reference/get_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get coordinates for a simple feature or bounding box object — get_coords","text":"x sf, bbox, sfc object. coords Column names use coordinates results, Default: NULL; set c(\"lon\", \"lat\") check_coords. geometry geometry use coordinates \"centroid\", \"surface point\", alternatively \"wkt\"; defaults NULL (\"centroid\"). crs Coordinate reference system use coordinates; defaults NULL. keep_all TRUE, bind coordinates columns provided object x, Default: TRUE. drop TRUE x sf object, drop geometry Default: TRUE. call Passed call parameter rlang::arg_match improve error messages function used internally.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_coords.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get coordinates for a simple feature or bounding box object — get_coords","text":"get_minmax get bounding box feature (group features) appends xmin, ymin, xmax, ymax values feature simple feature object.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_data_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data directory exists and create a new directory if needed — get_data_dir","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"utility function wraps rappdirs::user_cache_dir.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_data_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"","code":"get_data_dir(   path = NULL,   cache = FALSE,   create = TRUE,   package = \"sfext\",   null.ok = TRUE )"},{"path":"https://elipousson.github.io/sfext/reference/get_data_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data directory exists and create a new directory if needed — get_data_dir","text":"path Path directory use data directory. cache TRUE, path NULL set path rappdirs::user_cache_dir (using value package appname). create FALSE path exist, return path warning. TRUE rlang::is_interactive TRUE, ask user directory created. session interactive create TRUE, new directory created. package Package name; defaults \"sfext\"","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_margin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"function works combination get_paper() function make easier position map page saving file. primarily useful using map plot created ggplot2 part print document format composed outside R using page layout application Adobe InDesign.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_margin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"","code":"get_margin(   margin = NULL,   paper = NULL,   orientation = NULL,   dist = NULL,   unit = \"in\",   block_width = NULL,   header = 0,   footer = 0 )"},{"path":"https://elipousson.github.io/sfext/reference/get_margin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"margin Margin style (options include \"extrawide\", \"wide\", \"standard\", \"narrow\", \"none\"), Additional \"auto\" option generate margin based line length planned yet implemented. Default: NULL (equivalent \"none\"). paper Paper, Default: 'letter'. orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait'. dist Margin distance (single value used sides), Default: NULL unit Unit margin distance, Default: ''. block_width Plot map width units. paper block_width provided, margins half distance two evenly distributed. sets margin distance height well width work well header footers improved future. header, footer Header footer height units; defaults 0. Please note: headers footers currently supported \"px\" units.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_margin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"ggplot2::margin() element intended use ggplot2::element_rect() plot.background theme element.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/get_margin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get margins for a ggplot2 plot or map based on style or distance — get_margin","text":"","code":"get_margin(\"standard\") #> [1] 1inches 1inches 1inches 1inches  get_margin(\"none\") #> [1] 0inches 0inches 0inches 0inches  get_margin(dist = 25, unit = \"mm\") #> [1] 25mm 25mm 25mm 25mm  get_margin(paper = \"letter\", block_width = 5.5) #> [1] 1.5inches 1.5inches 1.5inches 1.5inches"},{"path":"https://elipousson.github.io/sfext/reference/get_measurements.html","id":null,"dir":"Reference","previous_headings":"","what":"Get measurements for simple feature objects — get_measurements","title":"Get measurements for simple feature objects — get_measurements","text":"Get measurements simple feature objects","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_measurements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get measurements for simple feature objects — get_measurements","text":"","code":"get_area(x, units = NULL, keep_all = TRUE, drop = FALSE, .id = \"area\")  st_area_ext(x, units = NULL, keep_all = TRUE, drop = FALSE, .id = \"area\")  get_length(x, units = NULL, keep_all = TRUE, drop = FALSE, .id = \"length\")  st_length_ext(x, units = NULL, keep_all = TRUE, drop = FALSE, .id = \"length\")  get_dist(   x,   to,   by_element = TRUE,   units = NULL,   drop = FALSE,   keep_all = TRUE,   .id = \"dist\",   ... )  st_distance_ext(   x,   to,   by_element = TRUE,   units = NULL,   drop = FALSE,   keep_all = TRUE,   .id = \"dist\",   ... )  get_bearing(x, dir = FALSE, keep_all = TRUE, .id = \"bearing\")  st_bearing(x, dir = FALSE, keep_all = TRUE, .id = \"bearing\")"},{"path":"https://elipousson.github.io/sfext/reference/get_measurements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get measurements for simple feature objects — get_measurements","text":"x sf sfc object measure. units Units return area, length, perimeter, distance; Default: NULL keep_all TRUE, return columns original object, Default: TRUE drop TRUE, drop units line lengths, Default: FALSE .id Column name use area, line length/perimeter, distance, bearing. sf, sfc, bbox object length 2 character vector. \"\" sf sfc object, must either single feature number features x (by_element TRUE). \"\" character vector must represent valid xy pair using following options: \"xmin\", \"ymin\", \"xmax\", \"ymax\", \"xmid\", \"ymid\". by_element logical; TRUE, return vector distance first elements x y, second, etc. FALSE, return dense matrix pairwise distances. ... passed s2_distance s2_distance_matrix dir Logical indicator whether include direction bearing; FALSE, return absolute (positive) bearing value. TRUE, return negative positive bearing values. Default: FALSE.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_measurements.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get measurements for simple feature objects — get_measurements","text":"Wrapper functions sf::geos_measures: get_area(): Wraps sf::st_area() MULTIPOINT MULTILINESTRING geometry converted polygon using sf::st_polygonize() used determine coverage area. get_length(): Wraps sf::st_length() POINT MULTIPOINT geometry converted LINESTRING using as_lines(). x POLYGON geometry, lwgeom::st_perimeter() used return perimeter instead length. get_dist(): Wraps sf::st_distance() x converted POINT using st_center() \"\" can POINT, sf object can converted POINT, character vector indicating point overall bounding box x. Additional measurement functions: get_bearing(): Wraps geosphere::bearing().","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/get_measurements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get measurements for simple feature objects — get_measurements","text":"","code":"nc <- read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))  # Get area for North Caroline counties get_area(nc[1:2,])$area #> Units: [m^2] #> [1] 1137107793  610916077 get_area(nc[1:2,], units = \"acres\")$area #> Units: [acres] #> [1] 280984.3 150960.0 get_area(nc[1:2,], units = \"acres\", .id = \"acreage\")$acreage #> Units: [acres] #> [1] 280984.3 150960.0  # Get distances for North Caroline counties get_dist(nc[1,], to = c(\"xmax\", \"ymax\"), units = \"mile\")$dist #> 18.03826 [mile] get_dist(nc[1,], to = nc[30,], units = \"km\")$dist #> 239.2365 [km]  # Create a line between two counties nc_line <- as_line(c(as_point(nc[1,]), as_point(nc[30,])), crs = sf::st_crs(nc))  # Get length and bearing of the line get_length(nc_line) #> Simple feature collection with 1 feature and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -81.49823 ymin: 36.02862 xmax: -78.87809 ymax: 36.4314 #> Geodetic CRS:  NAD27 #>         length                       geometry #> 1 239236.5 [m] LINESTRING (-81.49823 36.43... get_bearing(nc_line) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE #> Simple feature collection with 1 feature and 1 field #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -81.49823 ymin: 36.02862 xmax: -78.87809 ymax: 36.4314 #> Geodetic CRS:  NAD27 #>    bearing                       geometry #> 1 99.96725 LINESTRING (-81.49823 36.43..."},{"path":"https://elipousson.github.io/sfext/reference/get_paper.html","id":null,"dir":"Reference","previous_headings":"","what":"Get standard paper and image sizes — get_paper","title":"Get standard paper and image sizes — get_paper","text":"Use \"paper\" parameter (matching name paper_sizes), standard (optionally including series size) parameter, width, height units. May return multiple paper sizes depending parameters.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_paper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get standard paper and image sizes — get_paper","text":"","code":"get_paper(   paper = \"letter\",   orientation = \"portrait\",   standard = NULL,   series = NULL,   size = NULL,   width = NULL,   height = NULL,   units = NULL,   ncol = 1,   nrow = 1,   gutter = 0,   bbox = NULL,   margin = NULL,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/get_paper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get standard paper and image sizes — get_paper","text":"paper Paper, Default: 'letter'. orientation Orientation \"portrait\", \"landscape\", \"square\", Default: 'portrait'. standard Size standard, \"ANSI\", \"ISO\", \"British Imperial\", \"JIS\", \"USPS\", \"Facebook\", \"Instagram\", \"Twitter\". series Size series (e.g. ), Default: NULL size Size number (used \"ISO\" \"JIS\" series). Standard, series, size may required return single paper using parameters. width, height Width height units, Default: NULL. units Paper size units, either \"\", \"mm\", \"px\"; defaults NULL (using \"\" width height provided). ncol, nrow Number expected columns rows paper; used determine row_height section_asp paper data frame returned get_paper nrow ncol greater 1; defaults NULL. gutter Gutter distance units. Gutter used spacing nrow columns (variable spacing currently supported); defaults 0. bbox bounding box use get orientation using sf_bbox_asp() orientation = TRUE. margin numeric vector ggplot2 margin object. ... Additional parameters passed get_margin. plot_width can passed parameters paper single row. margin returned list column.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_paper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get standard paper and image sizes — get_paper","text":"Data frame one paper/image sizes.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_paper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get standard paper and image sizes — get_paper","text":"margin provided, block_width, block_height, block_asp calculated included columns returned data frame. Paper can also data frame \"width\", \"height\", \"orientation\", \"units\" columns.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_paper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get standard paper and image sizes — get_paper","text":"","code":"get_paper(\"letter\") #> # A tibble: 1 × 16 #>   name   series size  standard units width height   asp  ncol  nrow col_width #>   <chr>  <chr>  <chr> <chr>    <chr> <dbl>  <dbl> <dbl> <dbl> <dbl>     <dbl> #> 1 Letter NA     NA    ANSI     in      8.5     11 0.773     1     1       8.5 #> # … with 5 more variables: row_height <dbl>, gutter <dbl>, section_asp <dbl>, #> #   orientation <chr>, type <chr>  get_paper(paper = NULL, standard = \"ISO\", series = \"A\", size = 4) #> # A tibble: 1 × 16 #>   name  series size  standard units width height   asp  ncol  nrow col_width #>   <chr> <chr>  <chr> <chr>    <chr> <dbl>  <dbl> <dbl> <dbl> <dbl>     <dbl> #> 1 A4    A      4     ISO      mm      210    297 0.707     1     1       210 #> # … with 5 more variables: row_height <dbl>, gutter <dbl>, section_asp <dbl>, #> #   orientation <chr>, type <chr>  get_paper(width = 11, height = 17) #> # A tibble: 1 × 16 #>   name   series size  standard units width height   asp  ncol  nrow col_width #>   <chr>  <chr>  <chr> <chr>    <chr> <dbl>  <dbl> <dbl> <dbl> <dbl>     <dbl> #> 1 Letter NA     NA    ANSI     in      8.5     11 0.773     1     1       8.5 #> # … with 5 more variables: row_height <dbl>, gutter <dbl>, section_asp <dbl>, #> #   orientation <chr>, type <chr>"},{"path":"https://elipousson.github.io/sfext/reference/get_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Get standard scales and convert to scale distances — get_scale","title":"Get standard scales and convert to scale distances — get_scale","text":"Get standard scales convert scale distances","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get standard scales and convert to scale distances — get_scale","text":"","code":"get_scale(scale = NULL, standard = NULL, series = NULL)"},{"path":"https://elipousson.github.io/sfext/reference/get_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get standard scales and convert to scale distances — get_scale","text":"scale Scale name standard USGS, Engineering, Architectural series Map series","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_social_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Get social media image size to match platform and format — get_social_image","title":"Get social media image size to match platform and format — get_social_image","text":"See paper_sizes[paper_sizes$type == \"social\",]$name support image options.","code":""},{"path":"https://elipousson.github.io/sfext/reference/get_social_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get social media image size to match platform and format — get_social_image","text":"","code":"get_social_image(   image = NULL,   platform = NULL,   format = NULL,   orientation = NULL )"},{"path":"https://elipousson.github.io/sfext/reference/get_social_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get social media image size to match platform and format — get_social_image","text":"image Image size name, Default: NULL platform Social media platform, \"Instagram\", \"Facebook\", \"Twitter\", Default: NULL format Image format, \"post\", \"story\", \"cover\", Default: NULL orientation Image orientation, Default: NULL.","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_dist_units.html","id":null,"dir":"Reference","previous_headings":"","what":"General utility functions for working with distance units objects — is_dist_units","title":"General utility functions for working with distance units objects — is_dist_units","text":"is_dist_units: x distance unit object? is_diff_dist: difference x y distance? is_same_dist: x distance y? bbox x bbox y x, y, diagonal distance? is_shorter, is_longer: x shorter longer y? is_same_area: x y area?","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_dist_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General utility functions for working with distance units objects — is_dist_units","text":"","code":"is_dist_units(x)  is_diff_dist(x, y, units = NULL)  is_same_dist(x, y, dist = NULL, diff = FALSE, call = caller_env(), ...)  is_longer(x, y)  is_shorter(x, y)  get_dist_units(x, null.ok = TRUE, multiple = TRUE, quiet = FALSE)  as_dist_units(x, units = NULL, null.ok = FALSE, call = caller_env())  is_diff_area(x, y, units = NULL, union = TRUE)  is_same_area(x, y, units = NULL, union = TRUE, diff = FALSE, ...)"},{"path":"https://elipousson.github.io/sfext/reference/is_dist_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General utility functions for working with distance units objects — is_dist_units","text":"x, y objects check units is_diff_dist, x y units objects, use units; default NULL. dist type distance compare x y sf, sfc, bbox objects; \"diagdist\", \"xdist\", \"ydist\". defaults NULL. diff TRUE, return results is_diff_dist is_diff_area; FALSE, return logical indicator; defaults FALSE call Passed error_call parameter rlang::arg_match improve error messages function used internally. ... Additional parameters passed .equal null.ok null.ok TRUE, allow x return NULL value; FALSE, error NULL values. multiple TRUE x character vector distance/area units, get_dist_units may return multiple units. Passed rlang::arg_match. quiet TRUE, suppress warning messages. union TRUE, union objects comparing area is_diff_area() is_same_area(), defaults TRUE.","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_dist_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General utility functions for working with distance units objects — is_dist_units","text":"two additional functions support utility functions: get_dist_units: Get distance units x (x sf units objects character string dist_unit_options) as_dist_units: Convert x units using units::as_units","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/is_geom_type.html","id":null,"dir":"Reference","previous_headings":"","what":"What geometry type is this feature? — is_geom_type","title":"What geometry type is this feature? — is_geom_type","text":"flexible wrapper sf::st_geometry_type sf::st_is.","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_geom_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What geometry type is this feature? — is_geom_type","text":"","code":"is_geom_type(x, type = NULL, by_geometry = FALSE, ext = TRUE)  is_point(x, by_geometry = FALSE)  is_multipoint(x, by_geometry = FALSE)  is_line(x, by_geometry = FALSE)  is_multiline(x, by_geometry = FALSE)  is_polygon(x, by_geometry = FALSE)  is_multipolygon(x, by_geometry = FALSE)"},{"path":"https://elipousson.github.io/sfext/reference/is_geom_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What geometry type is this feature? — is_geom_type","text":"x sf sfc object passed sf::st_geometry_type type \"POINT\", check geometry type POINT. available geometry types; case sensitive; Default: NULL by_geometry Passed sf::st_geometry_type; defaults FALSE ext st_geom_type, ext TRUE check NULL, return list checks POINTS, POLYGONS, LINESTRING, returned types.","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_geom_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What geometry type is this feature? — is_geom_type","text":"ext FALSE type NULL, returns vector geometry types identical sf::st_geometry_type. ext TRUE, returns list , type NULL, returns logical vector.","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"What is the class or spatial attributes of this feature? — is_sf","title":"What is the class or spatial attributes of this feature? — is_sf","text":"class spatial attributes feature?","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What is the class or spatial attributes of this feature? — is_sf","text":"","code":"is_sf(x, ext = FALSE, null.ok = FALSE, list.ok = FALSE)  is_sfg(x, null.ok = FALSE)  is_sfc(x, null.ok = FALSE)  is_bbox(x, null.ok = FALSE)  is_sf_list(x, named = FALSE, ext = FALSE, null.ok = FALSE)  is_raster(x, null.ok = FALSE)  is_sp(x, null.ok = FALSE)  is_same_crs(x, y)"},{"path":"https://elipousson.github.io/sfext/reference/is_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What is the class or spatial attributes of this feature? — is_sf","text":"x sf, sfc, bbox object. ext TRUE, check x sf, sfc, bbox class object ; defaults FALSE. (used is_sf) null.ok TRUE x NULL, return TRUE; defaults FALSE. list.ok TRUE, is_sf return TRUE x list sf objects. named TRUE, check sf list named; defaults FALSE. y sf object character numeric object supported sf::st_crs can compared x. (used is_same_crs)","code":""},{"path":"https://elipousson.github.io/sfext/reference/is_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"What is the class or spatial attributes of this feature? — is_sf","text":"is_sf: x sf class object? is_sfc: x sfc class object? is_bbox: x bbox class object? is_sf_list: x list sf class objects (without names)? is_raster: x Raster class object? is_sp: x Spatial class object type? is_same_crs: x y coordinate reference system?","code":""},{"path":"https://elipousson.github.io/sfext/reference/make_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Make file name and path with optional label, prefix, or postfix — make_filename","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"helper function create consistent file names plots created data files exported write_sf_ext().","code":""},{"path":"https://elipousson.github.io/sfext/reference/make_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"","code":"make_filename(   name = NULL,   label = NULL,   filetype = NULL,   filename = NULL,   path = NULL,   prefix = NULL,   postfix = NULL,   pad = NULL,   width = NULL,   cache = FALSE,   create = TRUE )"},{"path":"https://elipousson.github.io/sfext/reference/make_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make file name and path with optional label, prefix, or postfix — make_filename","text":"name Name make file name converted snake case janitor::make_clean_names(), e.g. \"Residential zoning map\" becomes \"residential_zoning_map\" label Label combine name converted snake case janitor::make_clean_names(). label designed identify area shared characteristics across multiple data files, maps, plots. filetype File type extension. filename File name; file name NULL, name file type required. path Path file data directory. prefix File name prefix. \"date\" adds date prefix, \"time\" adds date/time prefix; defaults NULL. postfix File name postfix; defaults NULL. pad Single padding character added digits string; defaults \"0\" width Minimum width padded strings. cache TRUE, path set package cache directory using get_data_dir(); defaults FALSE. create FALSE path exist, return path warning. TRUE rlang::is_interactive TRUE, ask user directory created. session interactive create TRUE, new directory created.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/make_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Make map markers from a simple feature object — make_markers","title":"Make map markers from a simple feature object — make_markers","text":"Make map markers simple feature object","code":""},{"path":"https://elipousson.github.io/sfext/reference/make_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make map markers from a simple feature object — make_markers","text":"","code":"make_markers(   data,   groupname_col = NULL,   group_meta = NULL,   join = sf::st_intersects,   geo = FALSE,   coords = c(\"lon\", \"lat\"),   address = \"address\",   point = TRUE,   crs = NULL,   fn = NULL,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/make_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make map markers from a simple feature object — make_markers","text":"data Data markers, passed data parameter get_location_data() groupname_col Group column name, used join group metadata group_meta non-spatial data frame; Default: NULL group_meta Group metadata data frame sf object intersect markers; Default: NULL join join function used sf::st_join() group_meta sf object, Default: sf::st_intersects geo TRUE, geocode data using tidygeocoder::geo df_to_sf, Default: FALSE address Address column, used geo TRUE Default: 'address' point TRUE, convert geometry \"POINT\" sf::st_centroid(), Default: TRUE crs Coordinate reference system markers, Default: NULL fn Function apply data results; gives warning data grouped; Default: NULL ... Additional parameters passed get_location_data()","code":""},{"path":"https://elipousson.github.io/sfext/reference/misc_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional utility functions for sf objects — misc_sf","title":"Additional utility functions for sf objects — misc_sf","text":"Additional utility functions sf objects","code":""},{"path":"https://elipousson.github.io/sfext/reference/misc_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional utility functions for sf objects — misc_sf","text":"","code":"transform_sf(x, crs = NULL, null.ok = TRUE, ...)  relocate_sf_col(x, .after = dplyr::everything())  rename_sf_col(x, sf_col = \"geometry\")"},{"path":"https://elipousson.github.io/sfext/reference/misc_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional utility functions for sf objects — misc_sf","text":"x sf object. crs coordinate reference system sf, sfc, bbox object returns crs sf::st_crs. null.ok TRUE x NULL, return x. ... Additional parameters passed sf::st_transform .location place sf column ; defaults dplyr::everything. sf_col Name use sf column renaming; defaults \"geometry\".","code":""},{"path":"https://elipousson.github.io/sfext/reference/number_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort and number features by coordinates or distance — number_features","title":"Sort and number features by coordinates or distance — number_features","text":"Used maplayer::layer_numbers(). Supports multiple types sorting including sorting:","code":""},{"path":"https://elipousson.github.io/sfext/reference/number_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort and number features by coordinates or distance — number_features","text":"","code":"number_features(   x,   col = NULL,   sort = \"dist_xmin_ymax\",   to = NULL,   desc = FALSE,   crs = NULL,   num_style = \"arabic\",   num_start = 1,   suffix = NULL,   .id = \"number\" )  sort_features(   x,   col = NULL,   sort = c(\"lon\", \"lat\"),   to = NULL,   desc = FALSE,   crs = NULL )"},{"path":"https://elipousson.github.io/sfext/reference/number_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort and number features by coordinates or distance — number_features","text":"x sf sfc object. col Group column name, Default: NULL sort Sort column name, Default: \"dist_xmin_ymax\". sf object used determine sort order based distance feature center \"\" object. desc TRUE, sort descending; default FALSE. crs Coordinate reference use get_coords() get_minmax() \"sort\" following: \"lon\", \"lat\", \"longitude\", \"latitude\", \"xmin\", \"ymin\", \"xmax\", \"ymax\" num_style Style enumeration, either \"arabic\", \"alph\", \"Alph\", \"roman\", \"Roman\" num_start Starting number; defaults 1. suffix Character appended \"number\" column. (e.g. \".\" \"1.\" \":\" \"1:\"). Can also character vector length number column. .id Name column use feature numbers; defaults \"number\".","code":""},{"path":"https://elipousson.github.io/sfext/reference/number_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort and number features by coordinates or distance — number_features","text":"sf object number column ordered sort values.","code":""},{"path":"https://elipousson.github.io/sfext/reference/number_features.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort and number features by coordinates or distance — number_features","text":"centroid coordinates (\"lon\", \"lat\") appended get_coords() one bounding box min max values (\"xmin\", \"ymin\", \"xmax\", \"ymax\") appended get_minmax() distance corner, side midpoint, center bounding box (\"dist_xmin_ymin\", \"dist_xmax_ymax\", \"dist_xmin_ymax\", \"dist_xmax_ymin\", \"dist_xmin_ymid\", \"dist_xmax_ymid\", \"dist_xmid_ymin\", \"dist_xmid_ymax\", \"dist_xmid_ymid\") distance point (sf, sfc, bbox object) passed parameter example, eastern United States, can sort number features top-left corner map bottom right setting sort \"dist_xmin_ymax\" (default). number_features also supports range different numbering styles designed match standard enumeration options available LaTeX.","code":""},{"path":"https://elipousson.github.io/sfext/reference/paper_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard paper and image sizes — paper_sizes","title":"Standard paper and image sizes — paper_sizes","text":"Reference table standard paper, postcard, photo print, social media image sizes, get_paper get_social_image functions. Derived visioguy/PaperSizes repo, Adobe UK guide photo sizes sources.","code":""},{"path":"https://elipousson.github.io/sfext/reference/paper_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard paper and image sizes — paper_sizes","text":"","code":"paper_sizes"},{"path":"https://elipousson.github.io/sfext/reference/paper_sizes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard paper and image sizes — paper_sizes","text":"data frame 85 rows 9 variables: name Name paper series Series standard Standard size Size series units Units (\"\", \"mm\", \"px\") dimensions width Width units height Height units orientation Portrait (width less height), landscape, square type Type (paper, postcard, print, social)","code":""},{"path":"https://elipousson.github.io/sfext/reference/read_sf_exif.html","id":null,"dir":"Reference","previous_headings":"","what":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_sf_exif","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_sf_exif","text":"Read EXIF data folder images.","code":""},{"path":"https://elipousson.github.io/sfext/reference/read_sf_exif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_sf_exif","text":"","code":"read_sf_exif(   path = NULL,   filetype = NULL,   bbox = NULL,   sort = \"lon\",   tags = NULL,   ... )  write_exif(   path = NULL,   filetype = NULL,   title = NULL,   author = NULL,   date = NULL,   keywords = NULL,   args = NULL,   overwrite = TRUE )  write_exif_keywords(   path,   filetype = NULL,   key_list,   key_col = \"name\",   keywords = NULL,   join = NULL,   overwrite = TRUE )"},{"path":"https://elipousson.github.io/sfext/reference/read_sf_exif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_sf_exif","text":"path path folder one files EXIF location metadata. filetype file extension file type; defaults NULL. bbox Optional bounding box crop returned file (excluding images location data outside bounding box). bbox provided returned data match crs bbox. sort Column name variable sort . Currently supports \"lon\" (default), \"lat\", \"filename\" tags Optional list EXIF tags read files. Must include GPS tags create sf object. ... Additional EXIF tags pass exiftoolr::exif_read title Title add file metadata exiftoolr, Default: NULL. author Author add file metadata exiftoolr, Default: NULL. date Date add file metadata exiftoolr (currently working), Default: NULL. keywords Keyword(s) added file metadata exiftoolr, Default: NULL. args Alternate arguments passed exiftoolr::exif_call(). args NULL, title, author, date, keywords ignored; defaults NULL. overwrite TRUE, overwrite existing EXIF metadata present provided fields; defaults TRUE key_list List sf objects features keywords, e.g. boundaries key_col Column name key_list values use keywords. join geometry predicate function; defaults NULL, set sf::st_intersects key_list contains POLYGON MULTIPOLYGON objects sf::st_nearest_feature key_list contains types.","code":""},{"path":"https://elipousson.github.io/sfext/reference/read_sf_exif.html","id":"writing-exif-metadata","dir":"Reference","previous_headings":"","what":"Writing EXIF metadata","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_sf_exif","text":"NA","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/read_sf_exif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read EXIF metadata to create a simple feature object or write\nEXIF metadata to image files — read_sf_exif","text":"","code":"if (FALSE) {   read_sf_exif(     path = system.file(\"extdata/photos\", package = \"overedge\"),     filetype = \"jpeg\"   ) }"},{"path":"https://elipousson.github.io/sfext/reference/read_sf_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Read spatial data in a bounding box to a simple feature object from multiple sources — read_sf_ext","title":"Read spatial data in a bounding box to a simple feature object from multiple sources — read_sf_ext","text":"extended version sf::read_sf() support reading spatial data based file path, URL, data name associated package. Optionally provide bounding box filter data (supported data types).","code":""},{"path":"https://elipousson.github.io/sfext/reference/read_sf_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read spatial data in a bounding box to a simple feature object from multiple sources — read_sf_ext","text":"","code":"read_sf_ext(...)  read_sf_pkg(data, bbox = NULL, package = NULL, filetype = \"gpkg\", ...)  read_sf_path(path, bbox = NULL, ...)  read_sf_query(   dsn,   path = NULL,   bbox = NULL,   query = NULL,   table = NULL,   name = NULL,   name_col = NULL,   wkt_filter = NULL,   zm_drop = FALSE,   ... )  read_sf_excel(   path,   sheet = NULL,   bbox = NULL,   coords = c(\"lon\", \"lat\"),   from_crs = 4326,   geo = FALSE,   address = \"address\",   ... )  read_sf_csv(   path,   url = NULL,   bbox = NULL,   coords = c(\"lon\", \"lat\"),   from_crs = 4326,   geo = FALSE,   address = \"address\",   show_col_types = FALSE,   ... )  read_sf_url(url, bbox = NULL, coords = NULL, zm_drop = TRUE, ...)  read_sf_esri(   url,   bbox = NULL,   where = NULL,   name = NULL,   name_col = NULL,   coords = c(\"lon\", \"lat\"),   from_crs = 4326,   ... )  read_sf_gist(url, id = NULL, bbox = NULL, ...)  read_sf_gmap(url, bbox = NULL, zm_drop = TRUE)  read_sf_download(   url,   filename,   bbox = NULL,   path = NULL,   filetype = \"geojson\",   prefix = \"date\",   method = \"auto\",   unzip = FALSE,   ... )  read_sf_gsheet(   url,   sheet = NULL,   ss = NULL,   bbox = NULL,   ask = FALSE,   coords = c(\"lon\", \"lat\"),   from_crs = 4326,   geo = FALSE,   address = \"address\",   ... )"},{"path":"https://elipousson.github.io/sfext/reference/read_sf_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read spatial data in a bounding box to a simple feature object from multiple sources — read_sf_ext","text":"... Additional parameters passed multiple functions; see details. data Name package dataset; used read_sf_pkg() . bbox bounding box object; defaults NULL. \"bbox\" provided, returns features intersecting bounding box. package Package name; used read_sf_pkg() . filetype File type supported sf::read_sf(); Default: 'gpkg'; used read_sf_pkg() required data package cache directory extdata system files. path file path. dsn data source name (interpretation varies driver - drivers, dsn file name, may also folder, contain name access credentials database); case GeoJSON, dsn may character string holding geojson data. can also open database connection. query SQL query select records; see details name Name make file name converted snake case janitor::make_clean_names(), e.g. \"Residential zoning map\" becomes \"residential_zoning_map\" wkt_filter character; WKT representation spatial filter (may used bounding box, selecting overlapping geometries); see examples zm_drop TRUE, drop Z /M dimensions using sf::st_zm sheet Sheet read. Either string (name sheet), integer (position sheet). Ignored sheet specified via range. neither argument specifies sheet, defaults first sheet. coords Character vector coordinate values. Coordinates must use crs from_crs parameter. from_crs df_to_sf, coordinate reference system used coordinates well known text data frame. geo TRUE, use address_to_sf geocode address column; defaults FALSE. address Address column name, Default: 'address' url url spatial data file, tabular data coordinates, ArcGIS FeatureServer MapServer access esri2sf::esri2sf() show_col_types FALSE, show guessed column types. TRUE always show column types, even supplied. NULL (default) show column types explicitly supplied col_types argument. id name column store file path. useful reading multiple input files data file paths, data collection date. NULL (default) extra column created. filename File name; file name NULL, name file type required. prefix File name prefix. \"date\" adds date prefix, \"time\" adds date/time prefix; defaults NULL. method geocoding service used. API keys loaded environmental variables. Run usethis::edit_r_environ() open .Renviron file add API key environmental variable. example, add line GEOCODIO_API_KEY=\"YourAPIKeyHere\". \"osm\": Nominatim. \"census\": US Census. Geographic coverage limited United States.  Batch geocoding supported. \"arcgis\": ArcGIS. \"geocodio\": Geocodio. Geographic coverage limited United States Canada. API key must stored environmental variable \"GEOCODIO_API_KEY\". Batch geocoding supported. \"iq\": Location IQ.  API key must stored environmental variable \"LOCATIONIQ_API_KEY\". \"google\": Google.  API key must stored environmental variable \"GOOGLEGEOCODE_API_KEY\". \"opencage\": OpenCage.  API key must stored environmental variable \"OPENCAGE_KEY\". \"mapbox\": Mapbox.  API key must stored environmental variable \"MAPBOX_API_KEY\". \"\": .  API key must stored environmental variable \"HERE_API_KEY\". Batch geocoding supported, must explicitly called mode = \"batch\". \"tomtom\": TomTom.  API key must stored environmental variable \"TOMTOM_API_KEY\". Batch geocoding supported. \"mapquest\": MapQuest.  API key must stored environmental variable \"MAPQUEST_API_KEY\". Batch geocoding supported. \"bing\": Bing.  API key must stored environmental variable \"BINGMAPS_API_KEY\". Batch geocoding supported, must explicitly called mode = \"batch\". \"geoapify\": Geoapify.  API key must stored environmental variable \"GEOAPIFY_KEY\". \"cascade\"  use geocode_combine geo_combine instead. \"cascade\" method first uses one geocoding service uses second geocoding service first service return results. services order specified cascade_order argument. Note compatible full_results = TRUE geocoding services different columns return. unzip TRUE, url must zip file downloaded, unzipped temporary directory (created tempdir()), read file using specified file type. ss Something identifies Google Sheet: file id string drive_id URL can recover id one-row dribble, googledrive represents Drive files instance googlesheets4_spreadsheet, gs4_get() returns Processed as_sheets_id(). ask TRUE, ask name Google Sheet read ss provided read_sf_gsheet.","code":""},{"path":"https://elipousson.github.io/sfext/reference/read_sf_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read spatial data in a bounding box to a simple feature object from multiple sources — read_sf_ext","text":"Reading data url: read_sf_url supports multiple types urls: MapServer FeatureServer URL URL GitHub gist single spatial data file (first file used gist contains multiple) URL spatial data file CSV file Google Sheets URL public Google Maps URL Reading data package: read_sf_pkg looks three types package data: Data loaded package External data extdata system files folder. Cached data cache directory returned rappdirs::user_cache_dir Additional ... parameters: read_sf_pkg read_sf_download pass additional parameters read_sf_path supports query, name_col, name, table. name name_col ignored query parameter provided. table provided, expected layer name created based file path. read_sf_url pass , name_col, name ArcGIS FeatureServer MapServer url (passed read_sf_esri) sheet url Google Sheet (passed googlesheets4::read_sheet), query wkt filter parameter url type (passed sf::read_sf). read_sf_ext flexible function bbox named parameter parameters ... passed one overedge read_sf functions.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/sf_bbox_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure, transform, and convert bounding boxes — sf_bbox_misc","title":"Measure, transform, and convert bounding boxes — sf_bbox_misc","text":"Simple bounding box functions can use :","code":""},{"path":"https://elipousson.github.io/sfext/reference/sf_bbox_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure, transform, and convert bounding boxes — sf_bbox_misc","text":"","code":"sf_bbox_asp(bbox, orientation = FALSE)  sf_bbox_point(bbox, point = NULL, call = caller_env())  sf_bbox_dist(bbox, from, to, units = NULL, drop = TRUE, call = caller_env())  sf_bbox_xdist(bbox, units = NULL, drop = TRUE)  sf_bbox_ydist(bbox, units = NULL, drop = TRUE)  sf_bbox_diagdist(bbox, units = NULL, drop = TRUE)  sf_bbox_transform(bbox, crs = NULL)  sf_bbox_to_sf(bbox, sf_col = \"geometry\")  sf_bbox_to_sfc(bbox)  sf_bbox_to_wkt(bbox)  sf_bbox_to_lonlat_query(bbox, coords = c(\"longitude\", \"latitude\"), crs = 4326)  sf_bbox_shift(   bbox,   x_nudge = 0,   y_nudge = 0,   side = c(\"all\", \"top\", \"bottom\", \"left\", \"right\"),   dir = NULL,   call = caller_env() )  sf_bbox_contract(bbox, x_nudge = 0, y_nudge = 0)  sf_bbox_expand(bbox, x_nudge = 0, y_nudge = 0)"},{"path":"https://elipousson.github.io/sfext/reference/sf_bbox_misc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure, transform, and convert bounding boxes — sf_bbox_misc","text":"bbox bbox object. orientation TRUE, sf_bbox_asp returns suggested orientation based aspect ratio (< 0.9 \"portrait\"; > 1.1 \"landscape\"; else \"square\"); defaults FALSE. point Length 2 character vector representing coordinate pair corner, midpoint, center bounding box (\"xmin\", \"ymin\", \"xmax\", \"ymax\", \"xmid\", \"ymid\") call Passed error_call parameter rlang::arg_match improve error messages function used internally. , xy pairs (e.g. c(\"xmax\", \"ymax) defining points measure distance . units units return sf_bbox_dist. Defaults NULL. drop FALSE, distance functions return units. FALSE (default), distance functions return numeric values. crs coordinate reference system use query; default 4326 sf_col name use geometry column converting simple feature object; defaults \"geometry\". coords query column names coordinates. e,g, c(\"X\", \"Y\") c(\"lat\", \"lon\") x_nudge, y_nudge Length 1 2 numeric vector; unitless. side one sides shift: \"top\", \"bottom\", \"left\", \"right\", \"\" dir \"\", contract bbox x_nudge y_nudge. \"\", expand bbox x_nudge y_nudge. dir NULL; absolute values used x_nudge y_nudge. Defaults NULL.","code":""},{"path":"https://elipousson.github.io/sfext/reference/sf_bbox_misc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure, transform, and convert bounding boxes — sf_bbox_misc","text":"sf object","code":""},{"path":"https://elipousson.github.io/sfext/reference/sf_bbox_misc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure, transform, and convert bounding boxes — sf_bbox_misc","text":"Measure distances (sf_bbox_dist, sf_bbox_xdist, sf_bbox_ydist, sf_bbox_diagdist) Get aspect ratio orientation (sf_bbox_asp) (counts asp 0.9 1.1 \"square\") Return point corners, center, midpoints (sf_bbox_point) Transform coordinate reference system (sf_bbox_transform) Convert bounding box SQL style query (sf_bbox_to_lonlat_query), well known text (sf_bbox_to_wkt), simple feature object (sf_bbox_to_sf) Shift, expand, contract bounding box (sf_bbox_shift, sf_bbox_expand, sf_bbox_contract) functions additional parameters sf_bbox_to_lonlat_query sf_bbox_dist. functions take bbox parameter.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/sf_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between simple feature and data frame objects — sf_to_df","title":"Convert between simple feature and data frame objects — sf_to_df","text":"Helper function convert simple feature object data frame dropping geometry, converting geometry well known text, (geometry type POINT) getting coordinates centroid point surface. sfc object provided,\"drop\" geometry option supported.","code":""},{"path":"https://elipousson.github.io/sfext/reference/sf_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between simple feature and data frame objects — sf_to_df","text":"","code":"sf_to_df(   x,   crs = 4326,   coords = c(\"lon\", \"lat\"),   geometry = \"centroid\",   keep_all = TRUE )  df_to_sf(   x,   crs = NULL,   coords = c(\"lon\", \"lat\"),   from_crs = 4326,   into = NULL,   sep = \",\",   rev = TRUE,   remove_coords = FALSE,   geo = FALSE,   address = \"address\",   y = NULL,   by = NULL,   ... )  check_coords(x = NULL, coords = NULL, default = c(\"lon\", \"lat\"), rev = FALSE)  has_coords(x, coords = NULL, value = TRUE)"},{"path":"https://elipousson.github.io/sfext/reference/sf_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between simple feature and data frame objects — sf_to_df","text":"x sf sfc object data frame lat/lon coordinates single column two separated columns. crs Cordinate reference system return, Default: 4326 sf_to_df NULL df_to_sf. coords Coordinate columns input dataframe output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). geometry Type geometry include data frame. options include \"drop\", \"wkt\", \"centroid\", \"point\", Default: 'centroid'. keep_all FALSE, drop columns named coords, Default: TRUE. from_crs df_to_sf, coordinate reference system used coordinates well known text data frame. coords single column name longitude latitude, used names new columns coords separated . Passed tidyr::separate. sep coords single column name longitude latitude, sep used separator coordinate values. Passed tidyr::separate. rev TRUE, reverse c(\"lat\", \"lon\") coords c(\"lon\", \"lat\"). check_coords . remove_coords df_to_sf, TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. geo TRUE, use address_to_sf geocode address column; defaults FALSE. address Address column name passed tidygeocoder::geocode tidygeocoder::geo y sf object passed y argument dplyr::left_join. character vector variables join passed dplyr::left_join. ... parameters passed onto methods. default c(\"lon\", \"lat\"). value TRUE, return value coordinate column names. Used has_coords.","code":""},{"path":"https://elipousson.github.io/sfext/reference/sf_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between simple feature and data frame objects — sf_to_df","text":"sf_to_df() returns data frame geometry dropped converted wkt coordinates centroid point surface; df_to_sf() returns simple feature object POINT geometry.","code":""},{"path":"https://elipousson.github.io/sfext/reference/sf_to_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between simple feature and data frame objects — sf_to_df","text":"check_coords() helper function used df_to_sf() suggest appropriate coordinate column names based column names provided data frame.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/sf_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between simple feature and data frame objects — sf_to_df","text":"","code":"nc <- read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))  # Convert a sf object to a data frame nc_df <- sf_to_df(nc)  # Convert a data frame to a sf object df_to_sf(nc_df, coords = c(\"lon\", \"lat\"), remove_coords = TRUE) #> Simple feature collection with 100 features and 14 fields #> Attribute-geometry relationship: 14 constant, 0 aggregate, 0 identity #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -84.05977 ymin: 34.07688 xmax: -75.80913 ymax: 36.49124 #> Geodetic CRS:  WGS 84 #> # A tibble: 100 × 15 #>     AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>  * <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #>  1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10 #>  2 0.061      1.23  1827    1827 Alle… 37005  37005        3   487     0      10 #>  3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208 #>  4 0.07       2.97  1831    1831 Curr… 37053  37053       27   508     1     123 #>  5 0.153      2.21  1832    1832 Nort… 37131  37131       66  1421     9    1066 #>  6 0.097      1.67  1833    1833 Hert… 37091  37091       46  1452     7     954 #>  7 0.062      1.55  1834    1834 Camd… 37029  37029       15   286     0     115 #>  8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254 #>  9 0.118      1.42  1836    1836 Warr… 37185  37185       93   968     4     748 #> 10 0.124      1.43  1837    1837 Stok… 37169  37169       85  1612     1     160 #> # … with 90 more rows, and 4 more variables: BIR79 <dbl>, SID79 <dbl>, #> #   NWBIR79 <dbl>, geometry <POINT [°]>  # If lon and lat values are present in a single column, use the into parameter # to split the values back into separate columns nc_df$xy <- paste(nc_df$lon, nc_df$lat, sep = \",\")  df_to_sf(nc_df, coords = \"xy\", into = c(\"lon\", \"lat\")) #> Simple feature collection with 100 features and 16 fields #> Attribute-geometry relationship: 16 constant, 0 aggregate, 0 identity #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -84.05977 ymin: 34.07688 xmax: -75.80913 ymax: 36.49124 #> Geodetic CRS:  WGS 84 #> # A tibble: 100 × 17 #>     AREA PERIMETER CNTY_ CNTY_ID NAME  FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>  * <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #>  1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10 #>  2 0.061      1.23  1827    1827 Alle… 37005  37005        3   487     0      10 #>  3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208 #>  4 0.07       2.97  1831    1831 Curr… 37053  37053       27   508     1     123 #>  5 0.153      2.21  1832    1832 Nort… 37131  37131       66  1421     9    1066 #>  6 0.097      1.67  1833    1833 Hert… 37091  37091       46  1452     7     954 #>  7 0.062      1.55  1834    1834 Camd… 37029  37029       15   286     0     115 #>  8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254 #>  9 0.118      1.42  1836    1836 Warr… 37185  37185       93   968     4     748 #> 10 0.124      1.43  1837    1837 Stok… 37169  37169       85  1612     1     160 #> # … with 90 more rows, and 6 more variables: BIR79 <dbl>, SID79 <dbl>, #> #   NWBIR79 <dbl>, lon <dbl>, lat <dbl>, geometry <POINT [°]>"},{"path":"https://elipousson.github.io/sfext/reference/sfext-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sfext: Extra Functions for Simple Feature Data — sfext-package","title":"sfext: Extra Functions for Simple Feature Data — sfext-package","text":"Extra functions additional options reading, writing, transforming spatial data. Includes variety utility functions working tabular data coordinates distance area units.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/sfext-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sfext: Extra Functions for Simple Feature Data — sfext-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_bbox_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a bounding box buffered to match an aspect ratio — st_bbox_ext","title":"Get a bounding box buffered to match an aspect ratio — st_bbox_ext","text":"Takes area sf object bounding box returns bounding box matches provided aspect ratio contains area bounding box provided.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_bbox_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a bounding box buffered to match an aspect ratio — st_bbox_ext","text":"","code":"st_bbox_ext(   x = NULL,   dist = NULL,   diag_ratio = NULL,   asp = NULL,   unit = NULL,   crs = NULL,   class = \"bbox\",   null.ok = TRUE,   list.ok = TRUE )  st_bbox_asp(x = NULL, asp = NULL, class = \"bbox\", list.ok = TRUE)"},{"path":"https://elipousson.github.io/sfext/reference/st_bbox_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a bounding box buffered to match an aspect ratio — st_bbox_ext","text":"x object sf, bbox, sfc, raster, sp object data frame can converted sf object list sf, bbox, sfc objects. st_bbox_asp also supports vectors format bbox object. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" crs Coordinate reference system bounding box return class Class object return (sf bbox); defaults \"bbox\". null.ok TRUE x NULL, return NULL.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_bbox_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a bounding box buffered to match an aspect ratio — st_bbox_ext","text":"Class bbox object","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_bbox_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a bounding box buffered to match an aspect ratio — st_bbox_ext","text":"Common aspect ratios include \"1:1\" (1), \"4:6\" (0.666), \"8.5:11\", \"16:9\" (1.777). asp parameter supports numeric values character strings ratios matching format \"width:height\".","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_buffer_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Buffer a simple feature or bounding box object — st_buffer_ext","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"Return sf object buffer based dist proportion diagonal distance defined diag_ratio. x uses geographic coordinates, coordinate reference system transformed EPSG:3857 transformed back original CRS buffer applied.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_buffer_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"","code":"st_buffer_ext(   x,   dist = NULL,   diag_ratio = NULL,   unit = \"meter\",   dist_limits = NULL,   single_side = FALSE,   list.ok = TRUE,   ... )  st_edge(x, dist = NULL, diag_ratio = NULL, unit = \"meter\", ...)"},{"path":"https://elipousson.github.io/sfext/reference/st_buffer_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"x sf bbox object. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" dist_limits Numeric vector length (minimum maximum values used lower upper limits distance buffer). Units must match provided units; defaults NULL. single_side TRUE, single-sided buffers returned linear geometries, case negative dist values give buffers right-hand side, positive left. ... additional parameters passed sf::st_buffer","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_buffer_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Buffer a simple feature or bounding box object — st_buffer_ext","text":"st_edge variation st_buffer_ext dist diag_ratio used define width edge return either outside existing geometry (positive dist values) inside existing geometry (negative dist values).","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_cast_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast geometry of a simple feature object or simple feature collection to another type — st_cast_ext","title":"Cast geometry of a simple feature object or simple feature collection to another type — st_cast_ext","text":"Wrapper sf::st_cast() currently supports casting MULTIPOLYGON POLYGON MULTIPOLYGON POLYGON POINT , simplify = FALSE, can cast MULTIPOINT LINESTRING. different basic functionality st_cast development may improve utility function.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_cast_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast geometry of a simple feature object or simple feature collection to another type — st_cast_ext","text":"","code":"st_cast_ext(x, to = \"POINT\", simplify = TRUE, ...)"},{"path":"https://elipousson.github.io/sfext/reference/st_cast_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast geometry of a simple feature object or simple feature collection to another type — st_cast_ext","text":"x sf sfc object cast another type. character; target type, missing, simplification tried; x type sfg (.e., single geometry) needs specified. simplify TRUE, simplify geometry type; defaults TRUE. ... Arguments passed sf::st_cast","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Clip the side or corner of a simple feature or bounding box object — st_clip","title":"Clip the side or corner of a simple feature or bounding box object — st_clip","text":"Clip based corner object bounding box.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clip the side or corner of a simple feature or bounding box object — st_clip","text":"","code":"st_clip(   x,   clip = NULL,   keep = NULL,   flip = FALSE,   dist = NULL,   diag_ratio = NULL,   unit = \"meter\" )"},{"path":"https://elipousson.github.io/sfext/reference/st_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clip the side or corner of a simple feature or bounding box object — st_clip","text":"x sf bbox object clip clip Character string describing part area clip remove. Options include c(\"top\", \"right\", \"bottom\", \"left\", \"topright\", \"bottomright\", \"bottomleft\", \"topleft\"). NULL, area clipped full edge can returned. keep Alternate way defining clip (naming section keep). flip Logical. Default FALSE. TRUE, clip area kept instead removed. keep provided, flip automatically set TRUE. dist Numeric. Distance use edge. Default NULL meters. Use negative values inside edge positive numbers outside edge. diag_ratio Alternate way define edge distance. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\"","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_clip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clip the side or corner of a simple feature or bounding box object — st_clip","text":"sf object clipped based parameters","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_erase.html","id":null,"dir":"Reference","previous_headings":"","what":"Erase an area of a simple feature object — st_erase","title":"Erase an area of a simple feature object — st_erase","text":"extended version sf::st_difference uses flip parameter optionally call sf::st_intersection combines unions second object default. st_trim st_erase flip = TRUE.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_erase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Erase an area of a simple feature object — st_erase","text":"","code":"st_erase(x, y, flip = FALSE, union = TRUE)  st_trim(x, y, union = TRUE)"},{"path":"https://elipousson.github.io/sfext/reference/st_erase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Erase an area of a simple feature object — st_erase","text":"x sf, sfc, bbox object erase trim. y sf, sfc, bbox object use erase trim. flip TRUE, use st_intersection; FALSE use st_difference, Default: FALSE union TRUE, use sf::st_combine sf::st_union y applying difference/intersection, Default: FALSE","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_filter_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter, crop, trim, or erase a simple feature object or list — st_filter_ext","title":"Filter, crop, trim, or erase a simple feature object or list — st_filter_ext","text":"Filter, crop, trim, erase simple feature object list","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_filter_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter, crop, trim, or erase a simple feature object or list — st_filter_ext","text":"","code":"st_filter_ext(   x,   y = NULL,   crop = FALSE,   trim = FALSE,   erase = FALSE,   crs = NULL,   .predicate = sf::st_intersects,   geom_type = NULL,   null.ok = TRUE,   list.ok = TRUE,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/st_filter_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter, crop, trim, or erase a simple feature object or list — st_filter_ext","text":"x, y sf, sfc, bbox object. x may also sf list objects. x sf list, additional parameters ... ignored. crop TRUE, x cropped y using sf::st_crop(). trim TRUE, x trimmed y st_trim(). erase TRUE, x erased y st_erase(). crs Coordinate reference system return. .predicate geometry predicate function profile sf::st_intersects(); see details sf::st_filter() options. geom_type Character string passed type argument is_geom_type filter features matching specified geometry type. null.ok y NULL null.ok TRUE, x returned without changes. Defaults TRUE. list.ok TRUE, x can list sf, sfc, bbox objects. FALSE, sf, sfc, bbox objects supported. Defaults TRUE. ... Arguments passed sf::st_filter","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_join_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete a spatial join using a simple feature objects or an object and list — st_join_ext","title":"Complete a spatial join using a simple feature objects or an object and list — st_join_ext","text":"Wrapper sf::st_join works sf lists.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_join_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete a spatial join using a simple feature objects or an object and list — st_join_ext","text":"","code":"st_join_ext(x, y, col = NULL, .id = \"name\", join = NULL, ...)"},{"path":"https://elipousson.github.io/sfext/reference/st_join_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete a spatial join using a simple feature objects or an object and list — st_join_ext","text":"x sf, sfc, bbox object. y sf object column named \"name\" list sf objects items list \"name\" column. col Column name used convert y sf list already. .id Column name values added column input sf object. join geometry predicate function; defaults NULL, set sf::st_intersects key_list contains POLYGON MULTIPOLYGON objects sf::st_nearest_feature key_list contains types. ... Additional parameters passed sf::st_join","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_make_grid_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid over a simple feature bounding box — st_make_grid_ext","title":"Make a grid over a simple feature bounding box — st_make_grid_ext","text":"Create grid id column optionally set number columns rows. documentation incomplete function may change.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_make_grid_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid over a simple feature bounding box — st_make_grid_ext","text":"","code":"st_make_grid_ext(   x,   ...,   unit = NULL,   crs = NULL,   ncol = NULL,   nrow = NULL,   n = NULL,   gutter = 0,   desc = FALSE,   cellsize = NULL,   what = NULL,   style = \"rect\",   .id = \"id\",   filter = FALSE,   trim = FALSE )"},{"path":"https://elipousson.github.io/sfext/reference/st_make_grid_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid over a simple feature bounding box — st_make_grid_ext","text":"x sf, sfc, bbox object, Default: NULL. Required. ... Arguments passed st_bbox_ext dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" crs Coordinate reference system bounding box return ncol, nrow Used set n either NULL; defaults NULL. row id added columns grid provided. n n NULL square TRUE, grid set automatically 10 cells wide, Default: NULL gutter Distance units column cell; gutter effectively serves margin negative buffer applied cells (including edges grid). desc TRUE, reverse standard order cell id numbering; defaults FALSE cellsize target cellsize \"polygons\", \"corners\", \"centers\"; set centers automatically style \"circle\", \"circle_offset\" buffer applied return circular polygons. style Style cell return options including \"rect\", \"square\", \"hex\", \"flat_top_hex\", \"circle\", \"circle_offset\" .id name use cell id column. Defaults \"id\". filter TRUE (trim TRUE) filter grid geometry x using st_filter_ext trim TRUE, x trimmed y st_trim().","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/st_make_grid_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a grid over a simple feature bounding box — st_make_grid_ext","text":"","code":"nc <- read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))  # Make a 2 by 2 grid across a location with a 1000 meter gutter between each cell plot(   st_make_grid_ext(     x = nc[24, ],     dist = 500,     unit = \"meter\",     ncol = 2,     nrow = 2,     gutter = 1000   ) )   # Make a 5 by 5 grid with a 8.5 by 11 aspect ratio filtered to x plot(   st_make_grid_ext(     x = nc[24, ],     asp = 8.5 / 11,     ncol = 5,     nrow = 5,     filter = TRUE   ) )   # Make a 4 by 5 grid of circles trimmed to x boundaries plot(   st_make_grid_ext(     x = nc[24, ],     ncol = 4,     nrow = 5,     style = \"circle_offset\",     trim = TRUE   ),   max.plot = 1 )"},{"path":"https://elipousson.github.io/sfext/reference/st_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the geometry of a simple feature or bounding box object — st_misc","title":"Modify the geometry of a simple feature or bounding box object — st_misc","text":"Support bbox sf objects inputs.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the geometry of a simple feature or bounding box object — st_misc","text":"","code":"st_scale_rotate(x, scale = 1, rotate = 0)  st_center(x, ext = TRUE, ...)  st_square(x, scale = 1, rotate = 0, inscribed = FALSE)  st_inscribed_square(x, scale = 1, rotate = 0)  st_circle(x, scale = 1, inscribed = FALSE, dTolerance = 0)  st_circumscribed_circle(x, scale = 1)"},{"path":"https://elipousson.github.io/sfext/reference/st_misc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the geometry of a simple feature or bounding box object — st_misc","text":"x sf, sfc, bbox object scale numeric; scale factor, Default: 1 rotate numeric; degrees rotate (-360 360), Default: 0 ext TRUE, st_center returns list centroid sfc object, sf object (lon lat values), original geometry (x), original crs. objects; defaults TRUE. FALSE, return sf object. ... Additional parameters passed sf::st_centroid() st_center inscribed TRUE, make circle square inscribed within x, FALSE, make circumscribed. dTolerance numeric; tolerance parameter, specified feature geometry. run st_simplify, input data specified long-lat coordinates sf_use_s2() returns TRUE, value dTolerance must specified meters.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_misc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify the geometry of a simple feature or bounding box object — st_misc","text":"Scale rotate simple feature bounding box object using affine transformations Get center point sf object Get circumscribed square approximate inscribed square sf object Get circumscribed circle inscribed circle sf object st_inscribed_square wraps sf::st_inscribed_circle() limits circle 1 segment per quadrant (nQuadSegs = 1) rotates resulting geometry 45 degrees provide (mostly) inscribed square. different rotation value can provided change orientation shape, e.g. rotate = -45 return diamond shape. st_square() wraps st_bbox_ext() asp = 1.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/st_misc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify the geometry of a simple feature or bounding box object — st_misc","text":"","code":"nc <- read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\")) nc <- st_transform_ext(nc, crs = 3857)  plot(st_scale_rotate(nc), max.plot = 1)   plot(st_scale_rotate(nc, scale = 0.6, rotate = 15), max.plot = 1)   plot(st_square(nc[5,]))  plot(st_square(nc[5,], scale = 0.6, rotate = 45), col = \"blue\", add = TRUE)"},{"path":"https://elipousson.github.io/sfext/reference/st_transform_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform or convert coordinates of a simple feature or bounding box object — st_transform_ext","title":"Transform or convert coordinates of a simple feature or bounding box object — st_transform_ext","text":"Take sf, sfc, bbox object transform coordinate reference system match object provided crs.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_transform_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform or convert coordinates of a simple feature or bounding box object — st_transform_ext","text":"","code":"st_transform_ext(   x,   crs = NULL,   class = NULL,   rotate = 0,   null.ok = FALSE,   list.ok = TRUE )  st_omerc(x, rotate = 0)"},{"path":"https://elipousson.github.io/sfext/reference/st_transform_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform or convert coordinates of a simple feature or bounding box object — st_transform_ext","text":"x sf, sfc, bbox object, list sf objects. crs character numeric reference coordinate reference system supported sf::st_crs() another  sf, sfc, bbox object used provide crs. class Class object return (sf bbox). x sf list, returned object remains list may converted bbox class = \"sf\". rotate rotate greater less 0, st_transform_ext calls st_omerc returns object oblique mercator projection passing value rotate gamma parameter projection. rotate must -45 45 degrees. null.ok TRUE x NULL return x without error. Defaults FALSE. list.ok TRUE, x can list sf, sfc, bbox objects. FALSE, sf, sfc, bbox objects supported. Defaults TRUE.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_transform_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform or convert coordinates of a simple feature or bounding box object — st_transform_ext","text":"sf, sfc, bbox object transformed new coordinate reference system.","code":""},{"path":[]},{"path":"https://elipousson.github.io/sfext/reference/st_union_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Union simple feature objects and combine name column values — st_union_ext","title":"Union simple feature objects and combine name column values — st_union_ext","text":"Wrapper sf::st_union supporting additional feature combined name column collapsed single vector cli::pluralize.","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_union_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Union simple feature objects and combine name column values — st_union_ext","text":"","code":"st_union_ext(   x = NULL,   y = NULL,   name_col = \"name\",   sf_col = \"geometry\",   ext = TRUE,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/st_union_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Union simple feature objects and combine name column values — st_union_ext","text":"x sf, sfc, bbox object, Default: NULL y sf sfc object, Default: NULL name_col Column name collapse new name_col value, Default: 'name' sf_col Geometry column name use x sf object, Default: 'geometry' ext FALSE, st_union_ext functions sf::st_union, Default: TRUE ... Additional parameters passed sf::st_union","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_union_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Union simple feature objects and combine name column values — st_union_ext","text":"sfc object y NULL ext FALSE. tibble sf x sf object y NULL. y provided, st_union_ext identical sf::st_union","code":""},{"path":"https://elipousson.github.io/sfext/reference/st_union_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Union simple feature objects and combine name column values — st_union_ext","text":"","code":"nc <- read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\")) nc_union <- st_union_ext(nc[10:15,], name_col = \"NAME\") nc_union #> Simple feature collection with 1 feature and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -80.45301 ymin: 36.01413 xmax: -78.28293 ymax: 36.55104 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 2 #>   NAME                                                                  geometry #>   <chr>                                                            <POLYGON [°]> #> 1 Stokes, Caswell, Rockingham, Granville, Person, and… ((-78.41695 36.16217, -7… plot(nc_union)"},{"path":"https://elipousson.github.io/sfext/reference/standard_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard map, architectural, and engineering scales — standard_scales","title":"Standard map, architectural, and engineering scales — standard_scales","text":"Standard map scales derived USGS 2002 report map scales https://pubs.usgs.gov/fs/2002/0015/report.pdf","code":""},{"path":"https://elipousson.github.io/sfext/reference/standard_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard map, architectural, and engineering scales — standard_scales","text":"","code":"standard_scales"},{"path":"https://elipousson.github.io/sfext/reference/standard_scales.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard map, architectural, and engineering scales — standard_scales","text":"data frame 32 rows 16 variables: scale Scale name standard Standard (USGS, architectural, engineering) series Series name (USGS map scales ) actual_ft Scale distance 1 ft actual. actual_ft_unit Unit scale 1 ft actual. scale_in Actual distance 1 scale. scale_in_unit Unit actual distance 1 scale. scale_in_accuracy Accuracy 1 scale (approximate exact) scale_cm Actual distance 1 cm scale. scale_cm_unit Unit actual distance 1 cm scale. scale_cm_accuracy Accuracy 1 cm scale (approximate exact) size_latlon Standard size latitude/longitude size_latlon_unit Unit latitude/longitude size (minutes degrees) area_approx Approximate actual area area_approx_unit Approximate area unit series_status Series status (select USGS map series \"abandoned\")","code":""},{"path":"https://elipousson.github.io/sfext/reference/standard_scales.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standard map, architectural, and engineering scales — standard_scales","text":"Common architectural engineering scales derived FEMA guide using scales https://www.usfa.fema.gov/downloads/pdf/nfa/engineer-architect-scales.pdf","code":""},{"path":"https://elipousson.github.io/sfext/reference/str_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify strings to help make consistent file names — str_misc","title":"Modify strings to help make consistent file names — str_misc","text":"Prefix postfix can include one value added order provided. str_fix, string must single character string.","code":""},{"path":"https://elipousson.github.io/sfext/reference/str_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify strings to help make consistent file names — str_misc","text":"","code":"str_fix(   prefix = NULL,   string = NULL,   postfix = NULL,   sep = \"_\",   clean_names = TRUE,   pad = NULL,   width = NULL )  str_prefix(   string = NULL,   prefix = NULL,   sep = \"_\",   clean_names = TRUE,   post = FALSE,   date.format = \"%F\",   time.format = \"%Y-%m-%d_%I-%M-%S_%p\" )  str_pad_digits(string, pad = \"0\", side = \"left\", width = NULL)  str_extract_digits(string)  str_add_filetype(string, filetype = NULL)  str_remove_filetype(string, filetype = NULL)  str_extract_filetype(string)"},{"path":"https://elipousson.github.io/sfext/reference/str_misc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify strings to help make consistent file names — str_misc","text":"prefix Character string character vector add string parameter prefix. string single string attach prefix postfix added . postfix Character string character vector add string parameter postfix. sep Separator character passed collapse parameter paste(). clean_names TRUE, prefix, postfix, string converted snake case janitor::make_clean_names(). pad Single padding character added digits string; defaults \"0\" width Minimum width padded strings. post TRUE, use prefix string postfix; defaults FALSE. date.format, time.format Date time format used str_prefix prefix \"date\" \"time\" currently accessible using str_fix make_filename. side Side padding character added (left, right ). filetype File type string","code":""},{"path":"https://elipousson.github.io/sfext/reference/str_misc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify strings to help make consistent file names — str_misc","text":"Functions include: str_fix: Add label, prefix, postfix string str_prefix: Add prefix postfix string str_add_filetype: Add file type string str_remove_filetype: Remove file type string str_extract_filetype: Extract file type string str_pad_digits: Pad string digits str_extract_digits: Extract digits string","code":""},{"path":"https://elipousson.github.io/sfext/reference/write_sf_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Write or cache a simple feature object to a file — write_sf_ext","title":"Write or cache a simple feature object to a file — write_sf_ext","text":"write_sf_ext write_sf_cache helper functions wrap sf::write_sf function provide additional options including consistent file naming make_filename() features including:","code":""},{"path":"https://elipousson.github.io/sfext/reference/write_sf_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write or cache a simple feature object to a file — write_sf_ext","text":"","code":"write_sf_ext(   data,   name = NULL,   label = NULL,   prefix = NULL,   postfix = NULL,   filename = NULL,   filetype = NULL,   path = NULL,   cache = FALSE,   overwrite = FALSE )  write_sf_cache(   data,   name = NULL,   label = NULL,   prefix = NULL,   postfix = NULL,   filename = NULL,   filetype = NULL,   data_dir = NULL,   overwrite = FALSE )  write_sf_gist(   data,   name = NULL,   label = NULL,   prefix = NULL,   postfix = NULL,   filename = NULL,   filetype = \"geojson\",   description = NULL,   public = TRUE,   browse = FALSE,   token = Sys.getenv(\"GITHUB_PAT\") )  write_sf_gsheet(   data,   name = NULL,   label = NULL,   prefix = NULL,   postfix = NULL,   filename = NULL,   sheet = 1,   ask = FALSE,   key = NULL,   ... )"},{"path":"https://elipousson.github.io/sfext/reference/write_sf_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write or cache a simple feature object to a file — write_sf_ext","text":"data sf object write. name Name make file name converted snake case janitor::make_clean_names(), e.g. \"Residential zoning map\" becomes \"residential_zoning_map\" label Label combine name converted snake case janitor::make_clean_names(). label designed identify area shared characteristics across multiple data files, maps, plots. prefix File name prefix. \"date\" adds date prefix, \"time\" adds date/time prefix; defaults NULL. postfix File name postfix; defaults NULL. filename File name use. filename provided data sf object make sure include file type, e.g. \"data.gpkg\" \"data.csv\". Objects simple features written RDS readr::write_rds(). filetype File type write cache, Default: NULL write_sf_ext() path Path file data directory. cache TRUE, write sf object file cache directory; defaults FALSE. overwrite Logical. Default FALSE. TRUE, overwrite existing cached files use file name. data_dir cache data directory, defaults rappdirs::user_cache_dir() data_dir NULL. (used write_sf_cache; default used cache = TRUE write_sf_ext) description (character) Brief description gist (optional) public (logical) Whether gist public (default: TRUE) browse (logical) open newly create gist default browser (default: TRUE) token personal access token GitHub permission create gists; defaults Sys.getenv(\"GITHUB_PAT\") sheet Sheet write , sense \"worksheet\" \"tab\". can identify sheet name, string, position, number. ask TRUE, user prompted make revisions created Google Sheet. user responds prompt, date read back environment using read_sf_gsheet joined provided data column name provided key. Defaults FALSE. key ask TRUE, key required join sheet data provided data. ... args passed verb-POST","code":""},{"path":"https://elipousson.github.io/sfext/reference/write_sf_ext.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write or cache a simple feature object to a file — write_sf_ext","text":"data sf object, optionally save RDS file. filetype \"csv\" filename ends \".csv\" file automatically converted dataframe using df_to_sf(); file type \"gsheet\" file converted turned new Google Sheet document (Google account authorized googlesheets4 package using write_sf_gsheet() function.). cache TRUE use write_sf_cache cache file writing copy path provided. data named sf list, pass name sf object list name parameter keep parameters consistent write file object list.","code":""},{"path":[]}]
